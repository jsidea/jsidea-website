{
  "project": {
    "name": "jsidea",
    "url": "https://raw.githubusercontent.com/jsidea/jsidea/ce212272f0be082f8f6eb2265f51cb6db29caff9/"
  },
  "typescript": [
    {
      "fullName": "jsidea.action.Cursor",
      "file": "src/jsidea/action/Cursor.ts",
      "kind": 212,
      "imports": [
        "jsidea.action.Cursor",
        "jsidea.events.EventDispatcher",
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.action.EventCircuit",
      "file": "src/jsidea/action/EventCircuit.ts",
      "kind": 212,
      "imports": [
        "jsidea.action.EventCircuit",
        "jsidea.events.EventDispatcher",
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.display.Graphics",
      "file": "src/jsidea/display/Graphics.ts",
      "kind": 212,
      "imports": [
        "jsidea.display.Graphics",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.Transform",
        "jsidea.geom.Rect2D",
        "jsidea.layout.Box",
        "jsidea.layout.BoxModel.CANVAS",
        "jsidea.geom.Quad",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.events.EventDispatcher",
      "file": "src/jsidea/events/EventDispatcher.ts",
      "kind": 212,
      "imports": [
        "jsidea.events.EventDispatcher",
        "jsidea.events.IEventDispatcher",
        "jsidea.model.Dictonary",
        "jsidea.events.IEventListener"
      ]
    },
    {
      "fullName": "jsidea.events.Events",
      "file": "src/jsidea/events/Events.ts",
      "kind": 212,
      "imports": [
        "jsidea.events.Events"
      ]
    },
    {
      "fullName": "jsidea.events.IEventDispatcher",
      "file": "src/jsidea/events/IEventDispatcher.ts",
      "kind": 213,
      "imports": [
        "jsidea.events.IEventDispatcher"
      ]
    },
    {
      "fullName": "jsidea.events.IEventListener",
      "file": "src/jsidea/events/IEventListener.ts",
      "kind": 213,
      "imports": [
        "jsidea.events.IEventListener"
      ]
    },
    {
      "fullName": "jsidea.geom.IComposition2D",
      "file": "src/jsidea/geom/IComposition2D.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IComposition2D",
        "jsidea.geom.Point2D"
      ]
    },
    {
      "fullName": "jsidea.geom.IComposition3D",
      "file": "src/jsidea/geom/IComposition3D.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IComposition3D",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.geom.IMatrix2DValue",
      "file": "src/jsidea/geom/IMatrix2DValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IMatrix2DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.IMatrix3DValue",
      "file": "src/jsidea/geom/IMatrix3DValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IMatrix3DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.IPoint2DValue",
      "file": "src/jsidea/geom/IPoint2DValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.IPoint3DValue",
      "file": "src/jsidea/geom/IPoint3DValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IPoint3DValue",
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.IQuadValue",
      "file": "src/jsidea/geom/IQuadValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IQuadValue",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.geom.IRect2DValue",
      "file": "src/jsidea/geom/IRect2DValue.ts",
      "kind": 213,
      "imports": [
        "jsidea.geom.IRect2DValue",
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.Matrix2D",
      "file": "src/jsidea/geom/Matrix2D.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Matrix2D",
        "jsidea.geom.IMatrix2DValue",
        "jsidea.geom.IPoint2DValue",
        "jsidea.geom.Point2D",
        "jsidea.math.Number",
        "jsidea.geom.IComposition2D"
      ]
    },
    {
      "fullName": "jsidea.geom.Matrix3D",
      "file": "src/jsidea/geom/Matrix3D.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Matrix3D",
        "jsidea.geom.IMatrix3DValue",
        "jsidea.geom.IPoint2DValue",
        "jsidea.geom.Point3D",
        "jsidea.geom.IPoint3DValue",
        "jsidea.math.Number",
        "jsidea.geom.IComposition3D",
        "jsidea.geom.Rect2D"
      ]
    },
    {
      "fullName": "jsidea.geom.MatrixFit",
      "file": "src/jsidea/geom/MatrixFit.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.MatrixFit",
        "jsidea.geom.IQuadValue",
        "jsidea.geom.Matrix2D",
        "jsidea.geom.IPoint2DValue",
        "jsidea.geom.Quad",
        "jsidea.geom.Point3D",
        "jsidea.geom.Point2D",
        "jsidea.geom.IPoint3DValue",
        "jsidea.geom.Matrix3D"
      ]
    },
    {
      "fullName": "jsidea.geom.MatrixUtil",
      "file": "src/jsidea/geom/MatrixUtil.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.MatrixUtil",
        "jsidea.geom.Point3D",
        "jsidea.geom.Matrix3D"
      ]
    },
    {
      "fullName": "jsidea.geom.Point2D",
      "file": "src/jsidea/geom/Point2D.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Point2D",
        "jsidea.geom.IPoint2DValue",
        "jsidea.math.Number"
      ]
    },
    {
      "fullName": "jsidea.geom.Point3D",
      "file": "src/jsidea/geom/Point3D.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Point3D",
        "jsidea.geom.IPoint3DValue",
        "jsidea.geom.IPoint2DValue",
        "jsidea.math.Number"
      ]
    },
    {
      "fullName": "jsidea.geom.Quad",
      "file": "src/jsidea/geom/Quad.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Quad",
        "jsidea.geom.IQuadValue",
        "jsidea.geom.Point3D",
        "jsidea.geom.IPoint3DValue"
      ]
    },
    {
      "fullName": "jsidea.geom.Rect2D",
      "file": "src/jsidea/geom/Rect2D.ts",
      "kind": 212,
      "imports": [
        "jsidea.geom.Rect2D",
        "jsidea.geom.IRect2DValue",
        "jsidea.geom.Quad",
        "jsidea.geom.Point3D",
        "jsidea.system.Engine",
        "jsidea.math.Number",
        "jsidea.geom.IPoint2DValue",
        "jsidea.geom.Point2D"
      ]
    },
    {
      "fullName": "jsidea.layout.Box",
      "file": "src/jsidea/layout/Box.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.Box",
        "jsidea.system.Engine",
        "jsidea.math.Number",
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Rect2D",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.ATTACHMENT",
      "file": "src/jsidea/layout/BoxModel/Attachment.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.BoxModel.Background",
        "jsidea.layout.Box",
        "jsidea.geom.Rect2D",
        "jsidea.system.Engine",
        "jsidea.layout.Transform",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.ATTACHMENT",
        "jsidea.layout.IBoxModel"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.Background",
      "file": "src/jsidea/layout/BoxModel/Background.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.BoxModel.Background",
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Point3D",
        "jsidea.layout.Box",
        "jsidea.geom.Rect2D",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.math.Number",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.BoxModel.BACKGROUND"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.BACKGROUND",
      "file": "src/jsidea/layout/BoxModel/Background.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.BoxModel.Background",
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Point3D",
        "jsidea.layout.Box",
        "jsidea.geom.Rect2D",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.math.Number",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.BoxModel.BACKGROUND"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.BORDER",
      "file": "src/jsidea/layout/BoxModel/Border.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.BORDER"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.CANVAS",
      "file": "src/jsidea/layout/BoxModel/Canvas.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Matrix2D",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.geom.Point2D",
        "jsidea.layout.BoxModel.CANVAS"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.CLIP",
      "file": "src/jsidea/layout/BoxModel/Clip.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Rect2D",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.CLIP"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.CONTENT",
      "file": "src/jsidea/layout/BoxModel/Content.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.CONTENT"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.IMAGE",
      "file": "src/jsidea/layout/BoxModel/Image.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.IMAGE"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.MARGIN",
      "file": "src/jsidea/layout/BoxModel/Margin.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.MARGIN"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.NDC",
      "file": "src/jsidea/layout/BoxModel/NormalDeviceCoordinates.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.NDC"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.PADDING",
      "file": "src/jsidea/layout/BoxModel/Padding.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.PADDING"
      ]
    },
    {
      "fullName": "jsidea.layout.BoxModel.SCROLL",
      "file": "src/jsidea/layout/BoxModel/Scroll.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point2D",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.layout.BoxModel.SCROLL"
      ]
    },
    {
      "fullName": "jsidea.layout.IBoxModel",
      "file": "src/jsidea/layout/IBoxModel.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IBoxModel",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.layout.IMoveLimits",
      "file": "src/jsidea/layout/IMoveLimits.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IMoveLimits",
        "jsidea.layout.IBoxModel"
      ]
    },
    {
      "fullName": "jsidea.layout.IMoveMode",
      "file": "src/jsidea/layout/IMoveMode.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.layout.IPositionFrom",
      "file": "src/jsidea/layout/IPositionFrom.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IPositionFrom",
        "jsidea.layout.IPositionTo",
        "jsidea.math.ILimit"
      ]
    },
    {
      "fullName": "jsidea.layout.IPositionTo",
      "file": "src/jsidea/layout/IPositionTo.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IPositionTo",
        "jsidea.layout.IBoxModel"
      ]
    },
    {
      "fullName": "jsidea.layout.ISnapGrid",
      "file": "src/jsidea/layout/ISnapGrid.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.ISnapGrid",
        "jsidea.layout.IBoxModel"
      ]
    },
    {
      "fullName": "jsidea.layout.ISnapMode",
      "file": "src/jsidea/layout/ISnapMode.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.ISnapMode",
        "jsidea.layout.Snap",
        "jsidea.layout.Transform",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.layout.ISnapTo",
      "file": "src/jsidea/layout/ISnapTo.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.ISnapTo",
        "jsidea.layout.IBoxModel"
      ]
    },
    {
      "fullName": "jsidea.layout.IStyleNode",
      "file": "src/jsidea/layout/IStyleNode.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.IStyleNode",
        "jsidea.geom.Point2D"
      ]
    },
    {
      "fullName": "jsidea.layout.ITransformMode",
      "file": "src/jsidea/layout/ITransformMode.ts",
      "kind": 213,
      "imports": [
        "jsidea.layout.ITransformMode",
        "jsidea.layout.Transform",
        "jsidea.geom.Matrix3D"
      ]
    },
    {
      "fullName": "jsidea.layout.Move",
      "file": "src/jsidea/layout/Move.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.Move",
        "jsidea.geom.Point3D",
        "jsidea.layout.IMoveLimits",
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Transform",
        "jsidea.layout.MoveMode.TRANSFORM",
        "jsidea.layout.Box",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.math.Number",
        "jsidea.geom.Rect2D"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BACKGROUND",
      "file": "src/jsidea/layout/MoveMode/Background.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.BACKGROUND",
        "jsidea.geom.Rect2D",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.layout.MoveMode.BACKGROUND"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BORDER_BOTTOM_RIGHT_INNER",
      "file": "src/jsidea/layout/MoveMode/BorderBottomRightInner.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.BORDER_BOTTOM_RIGHT_INNER"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BORDER_BOTTOM_RIGHT_OUTER",
      "file": "src/jsidea/layout/MoveMode/BorderBottomRightOuter.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.BORDER_BOTTOM_RIGHT_OUTER"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BORDER_TOP_LEFT",
      "file": "src/jsidea/layout/MoveMode/BorderTopLeft.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.BORDER_TOP_LEFT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BOTTOM_LEFT",
      "file": "src/jsidea/layout/MoveMode/BottomLeft.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.BOTTOM_RIGHT",
        "jsidea.layout.MoveMode.TOP_LEFT",
        "jsidea.layout.MoveMode.BOTTOM_LEFT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.BOTTOM_RIGHT",
      "file": "src/jsidea/layout/MoveMode/BottomRight.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.TOP_LEFT",
        "jsidea.layout.StyleNode",
        "jsidea.layout.IStyleNode",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.BOTTOM_RIGHT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.CLIP",
      "file": "src/jsidea/layout/MoveMode/Clip.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.CLIP",
        "jsidea.geom.Rect2D",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.CLIP"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.CLIP_BOTTOM_RIGHT",
      "file": "src/jsidea/layout/MoveMode/ClipBottomRight.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.CLIP",
        "jsidea.geom.Rect2D",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.CLIP_BOTTOM_RIGHT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.MARGIN_BOTTOM_RIGHT",
      "file": "src/jsidea/layout/MoveMode/MarginBottomRight.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Point3D",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.MARGIN_BOTTOM_RIGHT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.MARGIN_TOP_LEFT",
      "file": "src/jsidea/layout/MoveMode/MarginTopLeft.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Point3D",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.MARGIN_TOP_LEFT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.SCROLL",
      "file": "src/jsidea/layout/MoveMode/Scroll.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.SCROLL",
        "jsidea.geom.Point3D",
        "jsidea.system.Engine",
        "jsidea.layout.MoveMode.SCROLL"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.TOP_LEFT",
      "file": "src/jsidea/layout/MoveMode/TopLeft.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Box",
        "jsidea.geom.Point3D",
        "jsidea.system.Engine",
        "jsidea.layout.StyleNode",
        "jsidea.layout.IStyleNode",
        "jsidea.geom.Point2D",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.BoxModel.CONTENT",
        "jsidea.system.Browser",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.TOP_LEFT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.TOP_LEFT_CLAMPED",
      "file": "src/jsidea/layout/MoveMode/TopLeftClamped.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.TOP_LEFT",
        "jsidea.math.Number",
        "jsidea.layout.MoveMode.TOP_LEFT_CLAMPED"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.TOP_RIGHT",
      "file": "src/jsidea/layout/MoveMode/TopRight.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.TOP_LEFT",
        "jsidea.layout.MoveMode.BOTTOM_RIGHT",
        "jsidea.layout.MoveMode.TOP_RIGHT"
      ]
    },
    {
      "fullName": "jsidea.layout.MoveMode.TRANSFORM",
      "file": "src/jsidea/layout/MoveMode/Transform.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.IMoveMode",
        "jsidea.geom.Matrix3D",
        "jsidea.geom.Point3D",
        "jsidea.system.Engine",
        "jsidea.layout.MoveMode.TRANSFORM"
      ]
    },
    {
      "fullName": "jsidea.layout.Position",
      "file": "src/jsidea/layout/Position.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.Position",
        "jsidea.layout.IPositionTo",
        "jsidea.layout.IPositionFrom",
        "jsidea.layout.Snap",
        "jsidea.layout.Move",
        "jsidea.layout.Transform",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.Box",
        "jsidea.math.Number",
        "jsidea.geom.Rect2D",
        "jsidea.math.ILimit",
        "jsidea.geom.Matrix3D"
      ]
    },
    {
      "fullName": "jsidea.layout.Snap",
      "file": "src/jsidea/layout/Snap.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.Snap",
        "jsidea.layout.ISnapMode",
        "jsidea.layout.ISnapTo",
        "jsidea.layout.ISnapGrid",
        "jsidea.layout.Move",
        "jsidea.layout.Transform",
        "jsidea.geom.Point3D",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.layout.SnapMode.BASIC",
        "jsidea.layout.Box",
        "jsidea.math.Number",
        "jsidea.geom.Rect2D",
        "jsidea.geom.Matrix3D"
      ]
    },
    {
      "fullName": "jsidea.layout.SnapMode.BASIC",
      "file": "src/jsidea/layout/SnapMode/Basic.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.ISnapMode",
        "jsidea.layout.Snap",
        "jsidea.layout.Transform",
        "jsidea.geom.Point3D",
        "jsidea.math.Number",
        "jsidea.layout.SnapMode.BASIC"
      ]
    },
    {
      "fullName": "jsidea.layout.StyleNode",
      "file": "src/jsidea/layout/StyleNode.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.StyleNode",
        "jsidea.layout.IStyleNode",
        "jsidea.system.Browser",
        "jsidea.system.Engine",
        "jsidea.math.Number",
        "jsidea.geom.Point2D"
      ]
    },
    {
      "fullName": "jsidea.layout.Transform",
      "file": "src/jsidea/layout/Transform.ts",
      "kind": 212,
      "imports": [
        "jsidea.layout.Transform",
        "jsidea.layout.IBoxModel",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.geom.Matrix3D",
        "jsidea.layout.Box",
        "jsidea.layout.ITransformMode",
        "jsidea.layout.TransformMode.RECTANGLE",
        "jsidea.layout.TransformMode.PLANAR",
        "jsidea.geom.Point3D",
        "jsidea.geom.Quad"
      ]
    },
    {
      "fullName": "jsidea.layout.TransformMode.PERSPECTIVE",
      "file": "src/jsidea/layout/TransformMode/Perspective.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.ITransformMode",
        "jsidea.geom.Matrix3D",
        "jsidea.layout.Transform",
        "jsidea.layout.StyleNode",
        "jsidea.layout.IStyleNode",
        "jsidea.math.Number",
        "jsidea.geom.Point2D",
        "jsidea.layout.TransformMode.PERSPECTIVE"
      ]
    },
    {
      "fullName": "jsidea.layout.TransformMode.PLANAR",
      "file": "src/jsidea/layout/TransformMode/Planar.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.ITransformMode",
        "jsidea.layout.Transform",
        "jsidea.geom.Matrix3D",
        "jsidea.geom.Rect2D",
        "jsidea.system.Browser",
        "jsidea.math.Number",
        "jsidea.system.Engine",
        "jsidea.layout.TransformMode.PLANAR"
      ]
    },
    {
      "fullName": "jsidea.layout.TransformMode.RECTANGLE",
      "file": "src/jsidea/layout/TransformMode/Rectangle.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.ITransformMode",
        "jsidea.layout.Transform",
        "jsidea.geom.Matrix3D",
        "jsidea.geom.Rect2D",
        "jsidea.layout.TransformMode.RECTANGLE"
      ]
    },
    {
      "fullName": "jsidea.layout.TransformMode.TEST",
      "file": "src/jsidea/layout/TransformMode/Test.ts",
      "kind": 209,
      "imports": [
        "jsidea.layout.ITransformMode",
        "jsidea.layout.Transform",
        "jsidea.geom.Matrix3D",
        "jsidea.geom.Rect2D",
        "jsidea.layout.TransformMode.TEST"
      ]
    },
    {
      "fullName": "jsidea.math.ILimit",
      "file": "src/jsidea/math/ILimit.ts",
      "kind": 213,
      "imports": [
        "jsidea.math.ILimit"
      ]
    },
    {
      "fullName": "jsidea.math.Number",
      "file": "src/jsidea/math/Number.ts",
      "kind": 212,
      "imports": [
        "jsidea.math.Number",
        "jsidea.geom.IPoint3DValue",
        "jsidea.math.ILimit",
        "jsidea.geom.IPoint2DValue"
      ]
    },
    {
      "fullName": "jsidea.model.Dictonary",
      "file": "src/jsidea/model/Dictionary.ts",
      "kind": 212,
      "imports": [
        "jsidea.model.Dictonary"
      ]
    },
    {
      "fullName": "jsidea.plugins.ISymbol",
      "file": "src/jsidea/plugins/Dependency.ts",
      "kind": 213,
      "imports": [
        "jsidea.plugins.ISymbol",
        "jsidea.plugins.DependencyUI",
        "jsidea.text.Text",
        "jsidea.plugins.Dependency",
        "jsidea.plugins.Plugin"
      ]
    },
    {
      "fullName": "jsidea.plugins.DependencyUI",
      "file": "src/jsidea/plugins/Dependency.ts",
      "kind": 212,
      "imports": [
        "jsidea.plugins.ISymbol",
        "jsidea.plugins.DependencyUI",
        "jsidea.text.Text",
        "jsidea.plugins.Dependency",
        "jsidea.plugins.Plugin"
      ]
    },
    {
      "fullName": "jsidea.plugins.Dependency",
      "file": "src/jsidea/plugins/Dependency.ts",
      "kind": 212,
      "imports": [
        "jsidea.plugins.ISymbol",
        "jsidea.plugins.DependencyUI",
        "jsidea.text.Text",
        "jsidea.plugins.Dependency",
        "jsidea.plugins.Plugin"
      ]
    },
    {
      "fullName": "jsidea.plugins.Plugin",
      "file": "src/jsidea/plugins/Plugin.ts",
      "kind": 212,
      "imports": [
        "jsidea.plugins.Plugin",
        "jsidea.events.EventDispatcher"
      ]
    },
    {
      "fullName": "jsidea.plugins.Runner",
      "file": "src/jsidea/plugins/Runner.ts",
      "kind": 211,
      "imports": [
        "jsidea.plugins.Runner"
      ]
    },
    {
      "fullName": "jsidea.plugins.Simbox",
      "file": "src/jsidea/plugins/Simbox.ts",
      "kind": 212,
      "imports": [
        "jsidea.plugins.Simbox",
        "jsidea.plugins.Plugin",
        "jsidea.geom.Matrix3D",
        "jsidea.geom.Point3D"
      ]
    },
    {
      "fullName": "jsidea.plugins.Test",
      "file": "src/jsidea/plugins/Test.ts",
      "kind": 212,
      "imports": [
        "jsidea.plugins.Test",
        "jsidea.plugins.Plugin",
        "jsidea.layout.Transform",
        "jsidea.layout.BoxModel.BORDER",
        "jsidea.geom.Point3D",
        "jsidea.layout.MoveMode.TRANSFORM",
        "jsidea.layout.Snap",
        "jsidea.layout.ISnapGrid",
        "jsidea.layout.BoxModel.PADDING",
        "jsidea.layout.ISnapTo",
        "jsidea.layout.IMoveMode",
        "jsidea.layout.Position",
        "jsidea.layout.Move",
        "jsidea.layout.IPositionTo",
        "jsidea.geom.Rect2D",
        "jsidea.layout.Box",
        "jsidea.display.Graphics",
        "jsidea.geom.Quad",
        "jsidea.geom.Point2D",
        "jsidea.geom.MatrixFit",
        "jsidea.geom.Matrix2D",
        "jsidea.layout.StyleNode",
        "jsidea.layout.IStyleNode",
        "jsidea.text.Text",
        "jsidea.events.EventDispatcher"
      ]
    },
    {
      "fullName": "jsidea.system.Browser",
      "file": "src/jsidea/system/Browser.ts",
      "kind": 212,
      "imports": [
        "jsidea.system.Browser"
      ]
    },
    {
      "fullName": "jsidea.system.Engine",
      "file": "src/jsidea/system/Engine.ts",
      "kind": 212,
      "imports": [
        "jsidea.system.Engine",
        "jsidea.system.Browser"
      ]
    },
    {
      "fullName": "jsidea.system.System",
      "file": "src/jsidea/system/System.ts",
      "kind": 212,
      "imports": [
        "jsidea.system.System"
      ]
    },
    {
      "fullName": "jsidea.text.Text",
      "file": "src/jsidea/text/Text.ts",
      "kind": 212,
      "imports": [
        "jsidea.text.Text",
        "jsidea.math.Number"
      ]
    }
  ],
  "files": [
    {
      "name": "src/definitions/jsidea.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/action/Cursor.ts",
      "size": 826,
      "sizeMinified": 442,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var action;\r\n    (function (action) {\r\n        var Cursor = (function (_super) {\r\n            __extends(Cursor, _super);\r\n            function Cursor() {\r\n                _super.call(this);\r\n                this.uid = 0;\r\n                this.x = 0;\r\n                this.y = 0;\r\n                this.target = null;\r\n            }\r\n            return Cursor;\r\n        })(jsidea.events.EventDispatcher);\r\n        action.Cursor = Cursor;\r\n    })(action = jsidea.action || (jsidea.action = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/action/EventCircuit.ts",
      "size": 825,
      "sizeMinified": 431,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var action;\r\n    (function (action) {\r\n        var EventCircuit = (function (_super) {\r\n            __extends(EventCircuit, _super);\r\n            function EventCircuit() {\r\n                _super.call(this);\r\n                this.uid = 0;\r\n                this.x = 0;\r\n                this.y = 0;\r\n            }\r\n            return EventCircuit;\r\n        })(jsidea.events.EventDispatcher);\r\n        action.EventCircuit = EventCircuit;\r\n    })(action = jsidea.action || (jsidea.action = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/display/Graphics.ts",
      "size": 3362,
      "sizeMinified": 1436,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var display;\r\n    (function (display) {\r\n        var Graphics = (function () {\r\n            function Graphics() {\r\n            }\r\n            Graphics.get = function (ctx) {\r\n                Graphics._instance._ctx = ctx;\r\n                return Graphics._instance;\r\n            };\r\n            Graphics.prototype.bounds = function (element, boxModel) {\r\n                var ctx = this._ctx;\r\n                var can = ctx.canvas;\r\n                boxModel = boxModel || jsidea.layout.BoxModel.BORDER;\r\n                var from = jsidea.layout.Transform.create(element);\r\n                var to = jsidea.layout.Transform.create(can);\r\n                var quad = from.size.bounds(boxModel).toQuad();\r\n                quad = from.localToLocalQuad(to, quad, null, jsidea.layout.BoxModel.CANVAS, quad);\r\n                this.quad(quad);\r\n                return this;\r\n            };\r\n            Graphics.prototype.strokeColor = function (color) {\r\n                var ctx = this._ctx;\r\n                ctx.strokeStyle = color;\r\n                return this;\r\n            };\r\n            Graphics.prototype.lineWidth = function (lineWidth) {\r\n                var ctx = this._ctx;\r\n                ctx.lineWidth = lineWidth;\r\n                return this;\r\n            };\r\n            Graphics.prototype.stroke = function (color, lineWidth) {\r\n                var ctx = this._ctx;\r\n                ctx.closePath();\r\n                if (color !== undefined)\r\n                    this.strokeColor(color);\r\n                if (lineWidth !== undefined)\r\n                    this.lineWidth(lineWidth);\r\n                ctx.stroke();\r\n                ctx.beginPath();\r\n                return this;\r\n            };\r\n            Graphics.prototype.cross = function (x, y, size) {\r\n                var ctx = this._ctx;\r\n                ctx.moveTo(x + size, y);\r\n                ctx.lineTo(x - size, y);\r\n                ctx.moveTo(x, y + size);\r\n                ctx.lineTo(x, y - size);\r\n                return this;\r\n            };\r\n            Graphics.prototype.quad = function (quad) {\r\n                var ctx = this._ctx;\r\n                ctx.moveTo(quad.p1.x, quad.p1.y);\r\n                ctx.lineTo(quad.p2.x, quad.p2.y);\r\n                ctx.lineTo(quad.p3.x, quad.p3.y);\r\n                ctx.lineTo(quad.p4.x, quad.p4.y);\r\n                ctx.lineTo(quad.p1.x, quad.p1.y);\r\n                return this;\r\n            };\r\n            Graphics.prototype.rect = function (box) {\r\n                var ctx = this._ctx;\r\n                ctx.moveTo(box.x, box.y);\r\n                ctx.lineTo(box.x + box.width, box.y);\r\n                ctx.lineTo(box.x + box.width, box.y + box.height);\r\n                ctx.lineTo(box.x, box.y + box.height);\r\n                ctx.lineTo(box.x, box.y);\r\n                return this;\r\n            };\r\n            Graphics.prototype.clear = function () {\r\n                var ctx = this._ctx;\r\n                ctx.closePath();\r\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                ctx.beginPath();\r\n                return this;\r\n            };\r\n            Graphics._instance = new Graphics();\r\n            return Graphics;\r\n        })();\r\n        display.Graphics = Graphics;\r\n    })(display = jsidea.display || (jsidea.display = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/events/EventDispatcher.ts",
      "size": 2253,
      "sizeMinified": 870,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var events;\r\n    (function (events) {\r\n        var EventDispatcher = (function () {\r\n            function EventDispatcher(scope) {\r\n                if (scope === void 0) { scope = null; }\r\n                this._listener = new jsidea.model.Dictonary();\r\n                this._scope = scope === null ? this : scope;\r\n            }\r\n            EventDispatcher.prototype.addEventListener = function (type, listener, useCapture) {\r\n                if (useCapture === void 0) { useCapture = false; }\r\n                var listeners = this.getListeners(type, useCapture);\r\n                var index = listeners.indexOf(listener);\r\n                if (index === -1)\r\n                    listeners.push(listener);\r\n            };\r\n            EventDispatcher.prototype.removeEventListener = function (type, listener, useCapture) {\r\n                if (useCapture === void 0) { useCapture = false; }\r\n                var listeners = this.getListeners(type, useCapture);\r\n                var index = listeners.indexOf(listener);\r\n                if (index !== -1)\r\n                    listeners.splice(index, 1);\r\n            };\r\n            EventDispatcher.prototype.dispatchEvent = function (event) {\r\n                var listeners = this.getListeners(event.type, false);\r\n                for (var i = 0; i < listeners.length; i++)\r\n                    listeners[i].apply(this._scope, event);\r\n                return !event.defaultPrevented;\r\n            };\r\n            EventDispatcher.prototype.getListeners = function (type, useCapture) {\r\n                if (useCapture === void 0) { useCapture = false; }\r\n                var key = type + (useCapture ? '1' : '0');\r\n                var listener = this._listener.getValue(key);\r\n                if (!listener)\r\n                    return this._listener.setValue(key, []);\r\n                return listener;\r\n            };\r\n            EventDispatcher.prototype.dispose = function () {\r\n                this._listener = null;\r\n                this._scope = null;\r\n            };\r\n            return EventDispatcher;\r\n        })();\r\n        events.EventDispatcher = EventDispatcher;\r\n    })(events = jsidea.events || (jsidea.events = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/events/Events.ts",
      "size": 892,
      "sizeMinified": 440,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var events;\r\n    (function (events) {\r\n        var Events = (function () {\r\n            function Events() {\r\n            }\r\n            Events.BLUR = \"blur\";\r\n            Events.IMAGE_LOAD = \"load\";\r\n            Events.KEY_DOWN = \"keydown\";\r\n            Events.KEY_UP = \"keyup\";\r\n            Events.KEY_PRESS = \"keypress\";\r\n            Events.MOUSE_CLICK = \"click\";\r\n            Events.MOUSE_DOUBLE_CLICK = \"dblclick\";\r\n            Events.MOUSE_DOWN = \"mousedown\";\r\n            Events.MOUSE_MOVE = \"mousemove\";\r\n            Events.MOUSE_UP = \"mouseup\";\r\n            Events.MOUSE_OUT = \"mouseout\";\r\n            Events.MOUSE_OVER = \"mouseover\";\r\n            Events.MOUSE_DRAG = \"mousedrag\";\r\n            return Events;\r\n        })();\r\n        events.Events = Events;\r\n    })(events = jsidea.events || (jsidea.events = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/events/IEventDispatcher.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/events/IEventListener.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IComposition2D.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IComposition3D.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IMatrix2DValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IMatrix3DValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IPoint2DValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IPoint3DValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IQuadValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/IRect2DValue.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/geom/Matrix2D.ts",
      "size": 18690,
      "sizeMinified": 7879,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Matrix2D = (function () {\r\n            function Matrix2D() {\r\n                this.m11 = 1;\r\n                this.m12 = 0;\r\n                this.m13 = 0;\r\n                this.m21 = 0;\r\n                this.m22 = 1;\r\n                this.m23 = 0;\r\n                this.m31 = 0;\r\n                this.m32 = 0;\r\n                this.m33 = 1;\r\n            }\r\n            Matrix2D.create = function (element, style, ret) {\r\n                if (element === void 0) { element = null; }\r\n                if (style === void 0) { style = null; }\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                if (element && element.ownerDocument)\r\n                    return ret.setCSS((style || window.getComputedStyle(element)).transform);\r\n                return ret.identity();\r\n            };\r\n            Matrix2D.prototype.getData = function (length) {\r\n                if (length === void 0) { length = 6; }\r\n                if (length == 9)\r\n                    return [this.m11, this.m12, this.m13, this.m21, this.m22, this.m23, this.m31, this.m32, this.m33];\r\n                return [this.m11, this.m12, this.m21, this.m22, this.m31, this.m32];\r\n            };\r\n            Matrix2D.prototype.setData = function (data) {\r\n                if (data === undefined)\r\n                    return this.identity();\r\n                var l = data.length;\r\n                if (l == 6) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = 0;\r\n                    this.m21 = data[2];\r\n                    this.m22 = data[3];\r\n                    this.m23 = 0;\r\n                    this.m31 = data[4];\r\n                    this.m32 = data[5];\r\n                    this.m33 = 1;\r\n                }\r\n                else if (l == 9) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = data[2];\r\n                    this.m21 = data[3];\r\n                    this.m22 = data[4];\r\n                    this.m23 = data[5];\r\n                    this.m31 = data[6];\r\n                    this.m32 = data[7];\r\n                    this.m33 = data[8];\r\n                }\r\n                else if (l == 16) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = data[3];\r\n                    this.m21 = data[4];\r\n                    this.m22 = data[5];\r\n                    this.m23 = data[7];\r\n                    this.m31 = data[12];\r\n                    this.m32 = data[13];\r\n                    this.m33 = data[15];\r\n                }\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.copyFrom = function (matrix) {\r\n                this.m11 = matrix.m11;\r\n                this.m12 = matrix.m12;\r\n                this.m13 = matrix.m13;\r\n                this.m21 = matrix.m21;\r\n                this.m22 = matrix.m22;\r\n                this.m23 = matrix.m23;\r\n                this.m31 = matrix.m31;\r\n                this.m32 = matrix.m32;\r\n                this.m33 = matrix.m33;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.copyTo = function (matrix) {\r\n                matrix.m11 = this.m11;\r\n                matrix.m12 = this.m12;\r\n                matrix.m12 = this.m13;\r\n                matrix.m21 = this.m21;\r\n                matrix.m22 = this.m22;\r\n                matrix.m23 = this.m23;\r\n                matrix.m31 = this.m31;\r\n                matrix.m32 = this.m32;\r\n                matrix.m33 = this.m33;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.clone = function () {\r\n                var m = new Matrix2D();\r\n                m.copyFrom(this);\r\n                return m;\r\n            };\r\n            Matrix2D.prototype.identity = function () {\r\n                this.m11 = 1;\r\n                this.m12 = 0;\r\n                this.m13 = 0;\r\n                this.m21 = 0;\r\n                this.m22 = 1;\r\n                this.m23 = 0;\r\n                this.m31 = 0;\r\n                this.m32 = 0;\r\n                this.m33 = 1;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.isIdentity = function () {\r\n                return this.m11 == 1 &&\r\n                    this.m12 == 0 &&\r\n                    this.m13 == 0 &&\r\n                    this.m21 == 0 &&\r\n                    this.m22 == 1 &&\r\n                    this.m23 == 0 &&\r\n                    this.m31 == 0 &&\r\n                    this.m32 == 0 &&\r\n                    this.m33 == 1;\r\n            };\r\n            Matrix2D.prototype.scalar = function (scalar) {\r\n                this.m11 *= scalar;\r\n                this.m12 *= scalar;\r\n                this.m13 *= scalar;\r\n                this.m21 *= scalar;\r\n                this.m22 *= scalar;\r\n                this.m23 *= scalar;\r\n                this.m31 *= scalar;\r\n                this.m32 *= scalar;\r\n                this.m33 *= scalar;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.normalize = function () {\r\n                var m33 = this.m33 || 0.0001;\r\n                return this.scalar(1 / m33);\r\n            };\r\n            Matrix2D.prototype.deltaTransform = function (point, ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                return ret.setTo(this.m11 * point.x + this.m21 * point.y, this.m12 * point.x + this.m22 * point.y, this.m13 * point.x + this.m23 * point.y);\r\n            };\r\n            Matrix2D.prototype.transform = function (point, ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                var w = jsidea.math.Number.parse(point.w, 1);\r\n                return ret.setTo(this.m11 * point.x + this.m21 * point.y + this.m31 * w, this.m12 * point.x + this.m22 * point.y + this.m32 * w, this.m13 * point.x + this.m23 * point.y + this.m33 * w);\r\n            };\r\n            Matrix2D.prototype.append = function (matrix) {\r\n                return Matrix2D.multiply(this, matrix, this);\r\n            };\r\n            Matrix2D.prototype.prepend = function (matrix) {\r\n                return Matrix2D.multiply(matrix, this, this);\r\n            };\r\n            Matrix2D.prototype.getPosition = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                ret.x = this.m31;\r\n                ret.y = this.m32;\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.setPosition = function (position) {\r\n                this.m31 = position.x;\r\n                this.m32 = position.y;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.makePosition = function (offset, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                ret.identity();\r\n                ret.m31 = offset.x;\r\n                ret.m32 = offset.y;\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.appendPosition = function (offset) {\r\n                return this.append(this.makePosition(offset, _MATRIX2D));\r\n                ;\r\n            };\r\n            Matrix2D.prototype.prependPosition = function (offset) {\r\n                return this.prepend(this.makePosition(offset, _MATRIX2D));\r\n            };\r\n            Matrix2D.prototype.prependPositionRaw = function (x, y) {\r\n                return this.prependPosition(_POINT.setTo(x, y));\r\n            };\r\n            Matrix2D.prototype.getScale = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                ret.x = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n                ret.y = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.setScale = function (pt) {\r\n                this.m11 = pt.x;\r\n                this.m22 = pt.y;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.makeScale = function (scale, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                ret.identity();\r\n                ret.setScale(scale);\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.appendScale = function (scale) {\r\n                this.append(this.makeScale(scale, _MATRIX2D));\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.prependScale = function (scale) {\r\n                return this.prepend(this.makeScale(scale, _MATRIX2D));\r\n            };\r\n            Matrix2D.prototype.prependScaleRaw = function (x, y) {\r\n                return this.prependScale(_POINT.setTo(x, y));\r\n            };\r\n            Matrix2D.prototype.getSkew = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                ret.setTo(Math.atan2(-this.m21, this.m22) * jsidea.math.Number.RAD_TO_DEG, Math.atan2(this.m12, this.m11) * jsidea.math.Number.RAD_TO_DEG);\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.setSkew = function (skew) {\r\n                this.m11 = Math.cos(skew.y * jsidea.math.Number.DEG_TO_RAD);\r\n                this.m12 = Math.sin(skew.y * jsidea.math.Number.DEG_TO_RAD);\r\n                this.m21 = -Math.sin(skew.x * jsidea.math.Number.DEG_TO_RAD);\r\n                this.m22 = Math.cos(skew.x * jsidea.math.Number.DEG_TO_RAD);\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.makeSkew = function (skew, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                ret.identity();\r\n                ret.setSkew(skew);\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.appendSkew = function (skew) {\r\n                return this.append(this.makeSkew(skew, _MATRIX2D));\r\n            };\r\n            Matrix2D.prototype.prependSkew = function (skew) {\r\n                return this.prepend(this.makeSkew(skew, _MATRIX2D));\r\n            };\r\n            Matrix2D.prototype.getRotation = function () {\r\n                var rotation = Math.atan2(this.m12, this.m11) * jsidea.math.Number.RAD_TO_DEG;\r\n                if (this.m11 < 0 && this.m22 >= 0)\r\n                    rotation += 180;\r\n                return rotation;\r\n            };\r\n            Matrix2D.prototype.setRotation = function (rotation) {\r\n                var ro = this.getRotation();\r\n                ro += rotation - ro;\r\n                this.appendRotation(ro);\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.makeRotation = function (angle, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                ret.identity();\r\n                ret.setRotation(angle);\r\n                return ret;\r\n            };\r\n            Matrix2D.prototype.appendRotation = function (angle) {\r\n                angle *= jsidea.math.Number.DEG_TO_RAD;\r\n                var m11 = this.m11;\r\n                var m21 = this.m21;\r\n                var m31 = this.m31;\r\n                var THETA = Math.cos(angle);\r\n                var BETA = Math.sin(angle);\r\n                this.m11 = m11 * THETA - this.m12 * BETA;\r\n                this.m12 = m11 * BETA + this.m12 * THETA;\r\n                this.m21 = m21 * THETA - this.m22 * BETA;\r\n                this.m22 = m21 * BETA + this.m22 * THETA;\r\n                this.m31 = m31 * THETA - this.m32 * BETA;\r\n                this.m32 = m31 * BETA + this.m32 * THETA;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.prependRotation = function (angle) {\r\n                return this.prepend(this.makeRotation(angle, _MATRIX2D));\r\n            };\r\n            Matrix2D.prototype.compose = function (target) {\r\n                this.identity();\r\n                if (target.scale.x != 1 || target.scale.y != 1)\r\n                    this.appendScale(target.scale);\r\n                if (target.skew.x || target.skew.y)\r\n                    this.appendSkew(target.skew);\r\n                if (target.rotation != 0)\r\n                    this.appendRotation(target.rotation);\r\n                if (target.position.x || target.position.y)\r\n                    this.appendPosition(target.position);\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.decompose = function (ret) {\r\n                if (ret === void 0) { ret = null; }\r\n                if (ret) {\r\n                    ret.position = this.getPosition(ret.position);\r\n                    ret.skew = this.getSkew(ret.skew);\r\n                    ret.scale = this.getScale(ret.scale);\r\n                    ret.rotation = this.getRotation();\r\n                    return ret;\r\n                }\r\n                return {\r\n                    position: this.getPosition(),\r\n                    skew: this.getSkew(),\r\n                    scale: this.getScale(),\r\n                    rotation: this.getRotation()\r\n                };\r\n            };\r\n            Matrix2D.prototype.invert = function () {\r\n                var m11 = this.m11;\r\n                var m12 = this.m12;\r\n                var m21 = this.m21;\r\n                var m22 = this.m22;\r\n                var m31 = this.m31;\r\n                var n = m11 * m22 - m12 * m21;\r\n                this.m11 = m22 / n;\r\n                this.m12 = -m12 / n;\r\n                this.m21 = -m21 / n;\r\n                this.m22 = m11 / n;\r\n                this.m31 = (m21 * this.m32 - m22 * m31) / n;\r\n                this.m32 = -(m11 * this.m32 - m12 * m31) / n;\r\n                this.m13 = 0;\r\n                this.m23 = 0;\r\n                this.m33 = 1;\r\n                return this;\r\n            };\r\n            Matrix2D.prototype.getCSS = function (fractionalDigits) {\r\n                if (fractionalDigits === void 0) { fractionalDigits = 6; }\r\n                return \"matrix(\"\r\n                    + this.m11.toFixed(fractionalDigits) + \",\"\r\n                    + this.m12.toFixed(fractionalDigits) + \",\"\r\n                    + this.m21.toFixed(fractionalDigits) + \",\"\r\n                    + this.m22.toFixed(fractionalDigits) + \",\"\r\n                    + this.m31.toFixed(fractionalDigits) + \",\"\r\n                    + this.m32.toFixed(fractionalDigits) + \")\";\r\n            };\r\n            Matrix2D.prototype.getCSS3D = function (fractionalDigits) {\r\n                if (fractionalDigits === void 0) { fractionalDigits = 6; }\r\n                return \"matrix3d(\"\r\n                    + this.m11.toFixed(fractionalDigits) + \",\"\r\n                    + this.m12.toFixed(fractionalDigits) + \",\"\r\n                    + 0 + \",\"\r\n                    + this.m13.toFixed(fractionalDigits) + \",\"\r\n                    + this.m21.toFixed(fractionalDigits) + \",\"\r\n                    + this.m22.toFixed(fractionalDigits) + \",\"\r\n                    + 0 + \",\"\r\n                    + this.m23.toFixed(fractionalDigits) + \",\"\r\n                    + 0 + \",\"\r\n                    + 0 + \",\"\r\n                    + 1 + \",\"\r\n                    + 0 + \",\"\r\n                    + this.m31.toFixed(fractionalDigits) + \",\"\r\n                    + this.m32.toFixed(fractionalDigits) + \",\"\r\n                    + 0 + \",\"\r\n                    + this.m33.toFixed(fractionalDigits) + \")\";\r\n            };\r\n            Matrix2D.prototype.setCSS = function (cssString) {\r\n                if (!cssString || cssString == \"none\")\r\n                    return this.identity();\r\n                var trans = cssString.replace(\"matrix3d(\", \"\").replace(\"matrix(\", \"\").replace(\")\", \"\").split(\",\");\r\n                var l = trans.length;\r\n                if (l < 6)\r\n                    return this.identity();\r\n                for (var i = 0; i < l; ++i)\r\n                    trans[i] = jsidea.math.Number.parse(trans[i], 0);\r\n                this.setData(trans);\r\n                return this;\r\n            };\r\n            Matrix2D.multiply = function (a, b, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                var data = _ARRAY;\r\n                data[0] = b.m11 * a.m11 + b.m12 * a.m21 + b.m13 * a.m31;\r\n                data[1] = b.m11 * a.m12 + b.m12 * a.m22 + b.m13 * a.m32;\r\n                data[2] = b.m11 * a.m13 + b.m12 * a.m23 + b.m13 * a.m33;\r\n                data[3] = b.m21 * a.m11 + b.m22 * a.m21 + b.m23 * a.m31;\r\n                data[4] = b.m21 * a.m12 + b.m22 * a.m22 + b.m23 * a.m32;\r\n                data[5] = b.m21 * a.m13 + b.m22 * a.m23 + b.m23 * a.m33;\r\n                data[6] = b.m31 * a.m11 + b.m32 * a.m21 + b.m33 * a.m31;\r\n                data[7] = b.m31 * a.m12 + b.m32 * a.m22 + b.m33 * a.m32;\r\n                data[8] = b.m31 * a.m13 + b.m32 * a.m23 + b.m33 * a.m33;\r\n                return ret.setData(data);\r\n            };\r\n            Matrix2D.adjugate = function (matrix, ret) {\r\n                if (ret === void 0) { ret = new Matrix2D(); }\r\n                var data = _ARRAY;\r\n                data[0] = matrix.m22 * matrix.m33 - matrix.m32 * matrix.m23;\r\n                data[1] = matrix.m32 * matrix.m13 - matrix.m12 * matrix.m33;\r\n                data[2] = matrix.m12 * matrix.m23 - matrix.m22 * matrix.m13;\r\n                data[3] = matrix.m31 * matrix.m23 - matrix.m21 * matrix.m33;\r\n                data[4] = matrix.m11 * matrix.m33 - matrix.m31 * matrix.m13;\r\n                data[5] = matrix.m21 * matrix.m13 - matrix.m11 * matrix.m23;\r\n                data[6] = matrix.m21 * matrix.m32 - matrix.m31 * matrix.m22;\r\n                data[7] = matrix.m31 * matrix.m12 - matrix.m11 * matrix.m32;\r\n                data[8] = matrix.m11 * matrix.m22 - matrix.m21 * matrix.m12;\r\n                return ret.setData(data);\r\n            };\r\n            Matrix2D.prototype.toStringTable = function (fractionDigits) {\r\n                if (fractionDigits === void 0) { fractionDigits = 3; }\r\n                return \"m11=\" + this.m11.toFixed(fractionDigits)\r\n                    + \"\\tm21=\" + this.m21.toFixed(fractionDigits)\r\n                    + \"\\tm31=\" + this.m31.toFixed(fractionDigits)\r\n                    + \"\\nm12=\" + this.m12.toFixed(fractionDigits)\r\n                    + \"\\tm22=\" + this.m22.toFixed(fractionDigits)\r\n                    + \"\\tm32=\" + this.m32.toFixed(fractionDigits)\r\n                    + \"\\nm13=\" + this.m13.toFixed(fractionDigits)\r\n                    + \"\\tm23=\" + this.m23.toFixed(fractionDigits)\r\n                    + \"\\tm33=\" + this.m33.toFixed(fractionDigits);\r\n            };\r\n            return Matrix2D;\r\n        })();\r\n        geom.Matrix2D = Matrix2D;\r\n        var _ARRAY = [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        var _MATRIX2D = new Matrix2D();\r\n        var _POINT = new geom.Point2D();\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/Matrix3D.ts",
      "size": 31985,
      "sizeMinified": 13300,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Matrix3D = (function () {\r\n            function Matrix3D() {\r\n                this.m11 = 1;\r\n                this.m12 = 0;\r\n                this.m13 = 0;\r\n                this.m14 = 0;\r\n                this.m21 = 0;\r\n                this.m22 = 1;\r\n                this.m23 = 0;\r\n                this.m24 = 0;\r\n                this.m31 = 0;\r\n                this.m32 = 0;\r\n                this.m33 = 1;\r\n                this.m34 = 0;\r\n                this.m41 = 0;\r\n                this.m42 = 0;\r\n                this.m43 = 0;\r\n                this.m44 = 1;\r\n            }\r\n            Matrix3D.create = function (element, style, ret) {\r\n                if (style === void 0) { style = null; }\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                if (element && element.ownerDocument)\r\n                    return ret.setCSS((style || window.getComputedStyle(element)).transform);\r\n                return ret.identity();\r\n            };\r\n            Matrix3D.prototype.getData = function () {\r\n                return [\r\n                    this.m11, this.m12, this.m13, this.m14,\r\n                    this.m21, this.m22, this.m23, this.m24,\r\n                    this.m31, this.m32, this.m33, this.m34,\r\n                    this.m41, this.m42, this.m43, this.m44\r\n                ];\r\n            };\r\n            Matrix3D.prototype.setData = function (data) {\r\n                if (data === undefined)\r\n                    return;\r\n                var l = data.length;\r\n                if (l == 16) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = data[2];\r\n                    this.m14 = data[3];\r\n                    this.m21 = data[4];\r\n                    this.m22 = data[5];\r\n                    this.m23 = data[6];\r\n                    this.m24 = data[7];\r\n                    this.m31 = data[8];\r\n                    this.m32 = data[9];\r\n                    this.m33 = data[10];\r\n                    this.m34 = data[11];\r\n                    this.m41 = data[12];\r\n                    this.m42 = data[13];\r\n                    this.m43 = data[14];\r\n                    this.m44 = data[15];\r\n                }\r\n                else if (l == 6) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = 0;\r\n                    this.m14 = 0;\r\n                    this.m21 = data[2];\r\n                    this.m22 = data[3];\r\n                    this.m23 = 0;\r\n                    this.m24 = 0;\r\n                    this.m31 = 0;\r\n                    this.m32 = 0;\r\n                    this.m33 = 1;\r\n                    this.m34 = 0;\r\n                    this.m41 = data[4];\r\n                    this.m42 = data[5];\r\n                    this.m43 = 0;\r\n                    this.m44 = 1;\r\n                }\r\n                else if (l == 9) {\r\n                    this.m11 = data[0];\r\n                    this.m12 = data[1];\r\n                    this.m13 = 0;\r\n                    this.m14 = data[2];\r\n                    this.m21 = data[3];\r\n                    this.m22 = data[4];\r\n                    this.m23 = 0;\r\n                    this.m24 = data[5];\r\n                    this.m31 = 0;\r\n                    this.m32 = 0;\r\n                    this.m33 = 1;\r\n                    this.m34 = 0;\r\n                    this.m41 = data[6];\r\n                    this.m42 = data[7];\r\n                    this.m43 = 0;\r\n                    this.m44 = data[8];\r\n                }\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.copyFrom = function (matrix) {\r\n                this.m11 = matrix.m11;\r\n                this.m12 = matrix.m12;\r\n                this.m13 = matrix.m13;\r\n                this.m14 = matrix.m14;\r\n                this.m21 = matrix.m21;\r\n                this.m22 = matrix.m22;\r\n                this.m23 = matrix.m23;\r\n                this.m24 = matrix.m24;\r\n                this.m31 = matrix.m31;\r\n                this.m32 = matrix.m32;\r\n                this.m33 = matrix.m33;\r\n                this.m34 = matrix.m34;\r\n                this.m41 = matrix.m41;\r\n                this.m42 = matrix.m42;\r\n                this.m43 = matrix.m43;\r\n                this.m44 = matrix.m44;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.clone = function () {\r\n                return (new Matrix3D()).copyFrom(this);\r\n            };\r\n            Matrix3D.prototype.identity = function () {\r\n                this.m11 = 1;\r\n                this.m12 = 0;\r\n                this.m13 = 0;\r\n                this.m14 = 0;\r\n                this.m21 = 0;\r\n                this.m22 = 1;\r\n                this.m23 = 0;\r\n                this.m24 = 0;\r\n                this.m31 = 0;\r\n                this.m32 = 0;\r\n                this.m33 = 1;\r\n                this.m34 = 0;\r\n                this.m41 = 0;\r\n                this.m42 = 0;\r\n                this.m43 = 0;\r\n                this.m44 = 1;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.isIdentity = function () {\r\n                return this.m11 == 1 &&\r\n                    this.m12 == 0 &&\r\n                    this.m13 == 0 &&\r\n                    this.m14 == 0 &&\r\n                    this.m21 == 0 &&\r\n                    this.m22 == 1 &&\r\n                    this.m23 == 0 &&\r\n                    this.m24 == 0 &&\r\n                    this.m31 == 0 &&\r\n                    this.m32 == 0 &&\r\n                    this.m33 == 1 &&\r\n                    this.m34 == 0 &&\r\n                    this.m41 == 0 &&\r\n                    this.m42 == 0 &&\r\n                    this.m43 == 0 &&\r\n                    this.m44 == 1;\r\n            };\r\n            Matrix3D.prototype.scalar = function (scalar) {\r\n                this.m11 *= scalar;\r\n                this.m12 *= scalar;\r\n                this.m13 *= scalar;\r\n                this.m14 *= scalar;\r\n                this.m21 *= scalar;\r\n                this.m22 *= scalar;\r\n                this.m23 *= scalar;\r\n                this.m24 *= scalar;\r\n                this.m31 *= scalar;\r\n                this.m32 *= scalar;\r\n                this.m33 *= scalar;\r\n                this.m34 *= scalar;\r\n                this.m41 *= scalar;\r\n                this.m42 *= scalar;\r\n                this.m43 *= scalar;\r\n                this.m44 *= scalar;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.normalize = function () {\r\n                return this.scalar(1 / (this.m44 || 0.0001));\r\n            };\r\n            Matrix3D.prototype.unproject = function (point, ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                var x = point.x * this.m11 + point.y * this.m21 + this.m41;\r\n                var y = point.x * this.m12 + point.y * this.m22 + this.m42;\r\n                var z = point.x * this.m13 + point.y * this.m23 + this.m43;\r\n                var w = point.x * this.m14 + point.y * this.m24 + this.m44;\r\n                var qx = x + this.m31;\r\n                var qy = y + this.m32;\r\n                var qz = z + this.m33;\r\n                var qw = w + this.m34;\r\n                if (w == 0)\r\n                    w = 0.0001;\r\n                x /= w;\r\n                y /= w;\r\n                z /= w;\r\n                if (qw == 0)\r\n                    qw = 0.0001;\r\n                qx /= qw;\r\n                qy /= qw;\r\n                qz /= qw;\r\n                var wz = qz - z;\r\n                if (wz == 0)\r\n                    return ret.setTo(x, y, z, w);\r\n                var t = -z / wz;\r\n                x += t * (qx - x);\r\n                y += t * (qy - y);\r\n                return ret.setTo(x, y, z, w);\r\n            };\r\n            Matrix3D.prototype.project = function (point, ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                var z = point.z;\r\n                var w = point.x * this.m14 + point.y * this.m24 + z * this.m34 + this.m44;\r\n                var x = point.x * this.m11 + point.y * this.m21 + z * this.m31 + this.m41;\r\n                var y = point.x * this.m12 + point.y * this.m22 + z * this.m32 + this.m42;\r\n                if (w == 0)\r\n                    w = 0.0001;\r\n                x /= w;\r\n                y /= w;\r\n                if (w < 0) {\r\n                    x -= this.m41;\r\n                    y -= this.m42;\r\n                    x *= 1 / w;\r\n                    y *= 1 / w;\r\n                    x += this.m41;\r\n                    y += this.m42;\r\n                }\r\n                return ret.setTo(x, y, z, w);\r\n            };\r\n            Matrix3D.prototype.transform = function (point, ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                var x = point.x * this.m11 + point.y * this.m21 + point.z * this.m31 + point.w * this.m41;\r\n                var y = point.x * this.m12 + point.y * this.m22 + point.z * this.m32 + point.w * this.m42;\r\n                var z = point.x * this.m13 + point.y * this.m23 + point.z * this.m33 + point.w * this.m43;\r\n                var w = point.x * this.m14 + point.y * this.m24 + point.z * this.m34 + point.w * this.m44;\r\n                return ret.setTo(x, y, z, w);\r\n            };\r\n            Matrix3D.prototype.transformRaw = function (x, y, z, ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                return this.transform(Matrix3D._POINT.setTo(x, y, z), ret);\r\n            };\r\n            Matrix3D.prototype.append = function (b) {\r\n                return Matrix3D.multiply(this, b, this);\r\n            };\r\n            Matrix3D.prototype.prepend = function (b) {\r\n                return Matrix3D.multiply(b, this, this);\r\n            };\r\n            Matrix3D.prototype.getPosition = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                ret.x = this.m41;\r\n                ret.y = this.m42;\r\n                ret.z = this.m43;\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.setPosition = function (position) {\r\n                this.m41 = position.x;\r\n                this.m42 = position.y;\r\n                this.m43 = position.z;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.setPositionSafe = function (position) {\r\n                if (!isNaN(position.x))\r\n                    this.m41 = position.x;\r\n                if (!isNaN(position.y))\r\n                    this.m42 = position.y;\r\n                if (!isNaN(position.z))\r\n                    this.m43 = position.z;\r\n                return this;\r\n            };\r\n            Matrix3D.makePosition = function (position, ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                ret.identity();\r\n                ret.setPosition(position);\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.appendPosition = function (position) {\r\n                return this.append(Matrix3D.makePosition(position, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.appendPositionRaw = function (x, y, z) {\r\n                return this.appendPosition(Matrix3D._POINT.setTo(x, y, z));\r\n            };\r\n            Matrix3D.prototype.prependPosition = function (position) {\r\n                return this.prepend(Matrix3D.makePosition(position, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.prependPositionRaw = function (x, y, z) {\r\n                return this.prependPosition(Matrix3D._POINT.setTo(x, y, z, 0));\r\n            };\r\n            Matrix3D.prototype.getScale = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                ret.x = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\r\n                ret.y = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\r\n                ret.z = Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.setScale = function (scale) {\r\n                this.m11 = scale.x;\r\n                this.m22 = scale.y;\r\n                this.m33 = scale.z;\r\n                return this;\r\n            };\r\n            Matrix3D.makeScale = function (scale, ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                ret.identity();\r\n                ret.setScale(scale);\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.appendScale = function (scale) {\r\n                return this.append(Matrix3D.makeScale(scale, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.appendScaleRaw = function (x, y, z) {\r\n                return this.appendScale(Matrix3D._POINT.setTo(x, y, z));\r\n            };\r\n            Matrix3D.prototype.prependScale = function (scale) {\r\n                return this.prepend(Matrix3D.makeScale(scale, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.prependScaleRaw = function (x, y, z) {\r\n                return this.prependScale(Matrix3D._POINT.setTo(x, y, z));\r\n            };\r\n            Matrix3D.prototype.getSkew = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                ret.x = this.m14 * jsidea.math.Number.RAD_TO_DEG;\r\n                ret.y = this.m24 * jsidea.math.Number.RAD_TO_DEG;\r\n                ret.z = this.m34 * jsidea.math.Number.RAD_TO_DEG;\r\n                ret.w = this.m44;\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.setSkew = function (skew) {\r\n                this.m14 = skew.x * jsidea.math.Number.DEG_TO_RAD;\r\n                this.m24 = skew.y * jsidea.math.Number.DEG_TO_RAD;\r\n                this.m34 = skew.z * jsidea.math.Number.DEG_TO_RAD;\r\n                this.m44 = skew.w;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.setSkewRaw = function (x, y, z) {\r\n                return this.setSkew(Matrix3D._POINT.setTo(x, y, z));\r\n            };\r\n            Matrix3D.makeSkew = function (skew, ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                ret.identity();\r\n                ret.setSkew(skew);\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.appendSkew = function (skew) {\r\n                return this.append(Matrix3D.makeSkew(skew, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.prependSkew = function (skew) {\r\n                return this.prepend(Matrix3D.makeSkew(skew, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.getRotation = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point3D(); }\r\n                var m = this.getRotationMatrix(Matrix3D._MATRIX3D);\r\n                ret.y = -Math.asin(jsidea.math.Number.clamp(m.m13, -1, 1)) * jsidea.math.Number.RAD_TO_DEG;\r\n                if (Math.abs(this.m13) < 0.99999) {\r\n                    ret.x = Math.atan2(-m.m23, m.m33) * jsidea.math.Number.RAD_TO_DEG;\r\n                    ret.z = Math.atan2(-m.m12, m.m11) * jsidea.math.Number.RAD_TO_DEG;\r\n                }\r\n                else {\r\n                    ret.x = Math.atan2(m.m32, m.m22) * jsidea.math.Number.RAD_TO_DEG;\r\n                    ret.z = 0;\r\n                }\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.setRotation = function (euler) {\r\n                var x = euler.x * jsidea.math.Number.DEG_TO_RAD;\r\n                var y = euler.y * jsidea.math.Number.DEG_TO_RAD;\r\n                var z = euler.z * jsidea.math.Number.DEG_TO_RAD;\r\n                var a = Math.cos(x);\r\n                var b = Math.sin(x);\r\n                var c = Math.cos(y);\r\n                var d = Math.sin(y);\r\n                var e = Math.cos(z);\r\n                var f = Math.sin(z);\r\n                var ae = a * e;\r\n                var af = a * f;\r\n                var be = b * e;\r\n                var bf = b * f;\r\n                this.m11 = c * e;\r\n                this.m21 = -c * f;\r\n                this.m31 = d;\r\n                this.m12 = af + be * d;\r\n                this.m22 = ae - bf * d;\r\n                this.m32 = -b * c;\r\n                this.m13 = bf - ae * d;\r\n                this.m23 = be + af * d;\r\n                this.m33 = a * c;\r\n                return this;\r\n            };\r\n            Matrix3D.makeRotation = function (euler) {\r\n                var ret = new Matrix3D();\r\n                ret.setRotation(euler);\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.appendRotation = function (euler) {\r\n                return this.append(Matrix3D.makeRotation(euler));\r\n            };\r\n            Matrix3D.prototype.prependRotation = function (euler) {\r\n                return this.prepend(Matrix3D.makeRotation(euler));\r\n            };\r\n            Matrix3D.prototype.getRotationMatrix = function (ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                ret.identity();\r\n                var tmp = new geom.Point3D();\r\n                var scaleX = 1 / tmp.setTo(this.m11, this.m12, this.m13).length();\r\n                var scaleY = 1 / tmp.setTo(this.m21, this.m22, this.m23).length();\r\n                var scaleZ = 1 / tmp.setTo(this.m31, this.m32, this.m33).length();\r\n                ret.m11 = this.m11 * scaleX;\r\n                ret.m12 = this.m12 * scaleX;\r\n                ret.m13 = this.m13 * scaleX;\r\n                ret.m21 = this.m21 * scaleY;\r\n                ret.m22 = this.m22 * scaleY;\r\n                ret.m23 = this.m23 * scaleY;\r\n                ret.m31 = this.m31 * scaleZ;\r\n                ret.m32 = this.m32 * scaleZ;\r\n                ret.m33 = this.m33 * scaleZ;\r\n                return ret;\r\n            };\r\n            Matrix3D.makePerspective = function (perspective, ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                ret.identity();\r\n                ret.m34 = perspective ? -(1 / perspective) : 0;\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.appendPerspective = function (perspective) {\r\n                if (!perspective)\r\n                    return this;\r\n                return this.append(Matrix3D.makePerspective(perspective, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.prependPerspective = function (perspective) {\r\n                return this.prepend(Matrix3D.makePerspective(perspective, Matrix3D._MATRIX3D));\r\n            };\r\n            Matrix3D.prototype.getPerspective = function () {\r\n                return this.m34 ? -(1 / this.m34) : 0;\r\n            };\r\n            Matrix3D.prototype.setPerspective = function (perspective) {\r\n                this.m34 = perspective ? -(1 / perspective) : 0;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.compose = function (trans) {\r\n                this.identity();\r\n                if (trans.scale.x != 1 || trans.scale.y != 1 || trans.scale.z != 1)\r\n                    this.appendScale(trans.scale);\r\n                if (trans.skew.x || trans.skew.y || trans.skew.z)\r\n                    this.appendSkew(trans.skew);\r\n                if (trans.rotation.x != 0 || trans.rotation.y != 0 || trans.rotation.z != 0)\r\n                    this.appendRotation(trans.rotation);\r\n                if (trans.position.x || trans.position.y || trans.position.z)\r\n                    this.appendPosition(trans.position);\r\n                if (trans.perspective)\r\n                    this.appendPerspective(trans.perspective);\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.decompose = function (ret) {\r\n                if (ret === void 0) { ret = null; }\r\n                if (ret) {\r\n                    ret.perspective = this.getPerspective();\r\n                    ret.position = this.getPosition(ret.position);\r\n                    ret.skew = this.getSkew(ret.skew);\r\n                    ret.scale = this.getScale(ret.scale);\r\n                    ret.rotation = this.getRotation(ret.rotation);\r\n                    return ret;\r\n                }\r\n                return {\r\n                    perspective: this.getPerspective(),\r\n                    position: this.getPosition(),\r\n                    skew: this.getSkew(),\r\n                    scale: this.getScale(),\r\n                    rotation: this.getRotation()\r\n                };\r\n            };\r\n            Matrix3D.prototype.invert = function (target) {\r\n                target = target || this;\r\n                var data = [];\r\n                var n11 = this.m11, n12 = this.m12, n13 = this.m13, n14 = this.m14;\r\n                var n21 = this.m21, n22 = this.m22, n23 = this.m23, n24 = this.m24;\r\n                var n31 = this.m31, n32 = this.m32, n33 = this.m33, n34 = this.m34;\r\n                var n41 = this.m41, n42 = this.m42, n43 = this.m43, n44 = this.m44;\r\n                data[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n                data[1] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n                data[2] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n                data[3] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n                var det = n11 * data[0] + n21 * data[1] + n31 * data[2] + n41 * data[3];\r\n                if (det == 0) {\r\n                    console.warn(\"Can't invert matrix, determinant is 0\");\r\n                    return this;\r\n                }\r\n                data[4] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n                data[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n                data[6] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n                data[7] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n                data[8] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n                data[9] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n                data[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n                data[11] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n                data[12] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n                data[13] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n                data[14] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n                data[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n                target.setData(data);\r\n                target.scalar(1 / det);\r\n                return target;\r\n            };\r\n            Matrix3D.prototype.getCSS2D = function (fractionalDigits) {\r\n                if (fractionalDigits === void 0) { fractionalDigits = 6; }\r\n                return \"matrix(\"\r\n                    + this.m11.toFixed(fractionalDigits) + \",\"\r\n                    + this.m12.toFixed(fractionalDigits) + \",\"\r\n                    + this.m21.toFixed(fractionalDigits) + \",\"\r\n                    + this.m22.toFixed(fractionalDigits) + \",\"\r\n                    + this.m41.toFixed(fractionalDigits) + \",\"\r\n                    + this.m42.toFixed(fractionalDigits) + \")\";\r\n            };\r\n            Matrix3D.prototype.getCSS = function (fractionalDigits) {\r\n                if (fractionalDigits === void 0) { fractionalDigits = 6; }\r\n                return \"matrix3d(\"\r\n                    + this.m11.toFixed(fractionalDigits) + \",\"\r\n                    + this.m12.toFixed(fractionalDigits) + \",\"\r\n                    + this.m13.toFixed(fractionalDigits) + \",\"\r\n                    + this.m14.toFixed(fractionalDigits) + \",\"\r\n                    + this.m21.toFixed(fractionalDigits) + \",\"\r\n                    + this.m22.toFixed(fractionalDigits) + \",\"\r\n                    + this.m23.toFixed(fractionalDigits) + \",\"\r\n                    + this.m24.toFixed(fractionalDigits) + \",\"\r\n                    + this.m31.toFixed(fractionalDigits) + \",\"\r\n                    + this.m32.toFixed(fractionalDigits) + \",\"\r\n                    + this.m33.toFixed(fractionalDigits) + \",\"\r\n                    + this.m34.toFixed(fractionalDigits) + \",\"\r\n                    + this.m41.toFixed(fractionalDigits) + \",\"\r\n                    + this.m42.toFixed(fractionalDigits) + \",\"\r\n                    + this.m43.toFixed(fractionalDigits) + \",\"\r\n                    + this.m44.toFixed(fractionalDigits) + \")\";\r\n            };\r\n            Matrix3D.prototype.setCSS = function (cssString) {\r\n                if (!cssString || cssString == \"none\")\r\n                    return this.identity();\r\n                var trans = cssString.replace(\"matrix3d(\", \"\").replace(\"matrix(\", \"\").replace(\")\", \"\").split(\",\");\r\n                var l = trans.length;\r\n                for (var i = 0; i < l; ++i)\r\n                    trans[i] = jsidea.math.Number.parse(trans[i], 0);\r\n                return this.setData(trans);\r\n            };\r\n            Matrix3D.prototype.appendCSS = function (cssString, force2D) {\r\n                if (force2D === void 0) { force2D = false; }\r\n                if (!cssString || cssString == \"none\")\r\n                    return this;\r\n                if (force2D && cssString.indexOf(\"matrix3d\") >= 0)\r\n                    return this.append(Matrix3D._MATRIX3D.setCSS(cssString).flatten());\r\n                return this.append(Matrix3D._MATRIX3D.setCSS(cssString));\r\n            };\r\n            Matrix3D.prototype.prependCSS = function (cssString, force2D) {\r\n                if (force2D === void 0) { force2D = false; }\r\n                if (!cssString || cssString == \"none\")\r\n                    return this;\r\n                if (force2D && cssString.indexOf(\"matrix3d\") >= 0)\r\n                    return this.prepend(Matrix3D._MATRIX3D.setCSS(cssString).flatten());\r\n                return this.prepend(Matrix3D._MATRIX3D.setCSS(cssString));\r\n            };\r\n            Matrix3D.prototype.flatten = function () {\r\n                this.m31 = 0;\r\n                this.m32 = 0;\r\n                this.m33 = 1;\r\n                this.m34 = 0;\r\n                this.m44 = 1;\r\n                this.m14 = 0;\r\n                this.m24 = 0;\r\n                this.m43 = 0;\r\n                return this;\r\n            };\r\n            Matrix3D.prototype.is2D = function () {\r\n                return (this.m31 == 0 && this.m32 == 0 && this.m33 == 1 && this.m34 == 0 && this.m43 == 0 && this.m44 == 1);\r\n            };\r\n            Matrix3D.prototype.is3D = function () {\r\n                return !this.is2D();\r\n            };\r\n            Matrix3D.prototype.bounds = function (x, y, width, height, ret) {\r\n                if (ret === void 0) { ret = new geom.Rect2D(); }\r\n                var ptA = new geom.Point3D(x, y);\r\n                var ptB = new geom.Point3D(x + width, y);\r\n                var ptC = new geom.Point3D(x + width, y + height);\r\n                var ptD = new geom.Point3D(x, y + height);\r\n                this.project(ptA, ptA);\r\n                this.project(ptB, ptB);\r\n                this.project(ptC, ptC);\r\n                this.project(ptD, ptD);\r\n                var x = Math.min(ptA.x, ptB.x, ptC.x, ptD.x);\r\n                var y = Math.min(ptA.y, ptB.y, ptC.y, ptD.y);\r\n                var width = Math.max(ptA.x, ptB.x, ptC.x, ptD.x) - x;\r\n                var height = Math.max(ptA.y, ptB.y, ptC.y, ptD.y) - y;\r\n                return ret.setTo(x, y, width, height);\r\n            };\r\n            Matrix3D.multiply = function (a, b, ret) {\r\n                if (ret === void 0) { ret = new Matrix3D(); }\r\n                var m11 = a.m11 * b.m11 + a.m12 * b.m21 + a.m13 * b.m31 + a.m14 * b.m41;\r\n                var m12 = a.m11 * b.m12 + a.m12 * b.m22 + a.m13 * b.m32 + a.m14 * b.m42;\r\n                var m13 = a.m11 * b.m13 + a.m12 * b.m23 + a.m13 * b.m33 + a.m14 * b.m43;\r\n                var m14 = a.m11 * b.m14 + a.m12 * b.m24 + a.m13 * b.m34 + a.m14 * b.m44;\r\n                var m21 = a.m21 * b.m11 + a.m22 * b.m21 + a.m23 * b.m31 + a.m24 * b.m41;\r\n                var m22 = a.m21 * b.m12 + a.m22 * b.m22 + a.m23 * b.m32 + a.m24 * b.m42;\r\n                var m23 = a.m21 * b.m13 + a.m22 * b.m23 + a.m23 * b.m33 + a.m24 * b.m43;\r\n                var m24 = a.m21 * b.m14 + a.m22 * b.m24 + a.m23 * b.m34 + a.m24 * b.m44;\r\n                var m31 = a.m31 * b.m11 + a.m32 * b.m21 + a.m33 * b.m31 + a.m34 * b.m41;\r\n                var m32 = a.m31 * b.m12 + a.m32 * b.m22 + a.m33 * b.m32 + a.m34 * b.m42;\r\n                var m33 = a.m31 * b.m13 + a.m32 * b.m23 + a.m33 * b.m33 + a.m34 * b.m43;\r\n                var m34 = a.m31 * b.m14 + a.m32 * b.m24 + a.m33 * b.m34 + a.m34 * b.m44;\r\n                var m41 = a.m41 * b.m11 + a.m42 * b.m21 + a.m43 * b.m31 + a.m44 * b.m41;\r\n                var m42 = a.m41 * b.m12 + a.m42 * b.m22 + a.m43 * b.m32 + a.m44 * b.m42;\r\n                var m43 = a.m41 * b.m13 + a.m42 * b.m23 + a.m43 * b.m33 + a.m44 * b.m43;\r\n                var m44 = a.m41 * b.m14 + a.m42 * b.m24 + a.m43 * b.m34 + a.m44 * b.m44;\r\n                ret.m11 = m11;\r\n                ret.m12 = m12;\r\n                ret.m13 = m13;\r\n                ret.m14 = m14;\r\n                ret.m21 = m21;\r\n                ret.m22 = m22;\r\n                ret.m23 = m23;\r\n                ret.m24 = m24;\r\n                ret.m31 = m31;\r\n                ret.m32 = m32;\r\n                ret.m33 = m33;\r\n                ret.m34 = m34;\r\n                ret.m41 = m41;\r\n                ret.m42 = m42;\r\n                ret.m43 = m43;\r\n                ret.m44 = m44;\r\n                return ret;\r\n            };\r\n            Matrix3D.prototype.toStringTable = function (fractionalDigits) {\r\n                if (fractionalDigits === void 0) { fractionalDigits = 3; }\r\n                return \"m11=\" + this.m11.toFixed(fractionalDigits)\r\n                    + \"\\tm21=\" + this.m21.toFixed(fractionalDigits)\r\n                    + \"\\tm31=\" + this.m31.toFixed(fractionalDigits)\r\n                    + \"\\tm41=\" + this.m41.toFixed(fractionalDigits)\r\n                    + \"\\nm12=\" + this.m12.toFixed(fractionalDigits)\r\n                    + \"\\tm22=\" + this.m22.toFixed(fractionalDigits)\r\n                    + \"\\tm32=\" + this.m32.toFixed(fractionalDigits)\r\n                    + \"\\tm42=\" + this.m42.toFixed(fractionalDigits)\r\n                    + \"\\nm13=\" + this.m13.toFixed(fractionalDigits)\r\n                    + \"\\tm23=\" + this.m23.toFixed(fractionalDigits)\r\n                    + \"\\tm33=\" + this.m33.toFixed(fractionalDigits)\r\n                    + \"\\tm43=\" + this.m43.toFixed(fractionalDigits)\r\n                    + \"\\nm14=\" + this.m14.toFixed(fractionalDigits)\r\n                    + \"\\tm24=\" + this.m24.toFixed(fractionalDigits)\r\n                    + \"\\tm34=\" + this.m34.toFixed(fractionalDigits)\r\n                    + \"\\tm44=\" + this.m44.toFixed(fractionalDigits);\r\n            };\r\n            Matrix3D._POINT = new geom.Point3D();\r\n            Matrix3D._MATRIX3D = new Matrix3D();\r\n            return Matrix3D;\r\n        })();\r\n        geom.Matrix3D = Matrix3D;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/MatrixFit.ts",
      "size": 8226,
      "sizeMinified": 3070,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var MatrixFit = (function () {\r\n            function MatrixFit() {\r\n            }\r\n            MatrixFit.quad = function (from, to) {\r\n                var s = MatrixFit.basis(from);\r\n                var d = MatrixFit.basis(to);\r\n                var ad = geom.Matrix2D.adjugate(s);\r\n                return d.append(ad).normalize();\r\n            };\r\n            MatrixFit.fromQuad = function (origin, width, height, to) {\r\n                var from = new geom.Quad();\r\n                from.setRect(-origin.x, -origin.y, width, height);\r\n                var m = MatrixFit.quad(from, to);\r\n                m.prependPositionRaw(-origin.x, -origin.y);\r\n                return m;\r\n            };\r\n            MatrixFit.basis = function (quad) {\r\n                var m = new geom.Matrix2D();\r\n                m.m11 = quad.p1.x;\r\n                m.m12 = quad.p1.y;\r\n                m.m13 = 1;\r\n                m.m21 = quad.p2.x;\r\n                m.m22 = quad.p2.y;\r\n                m.m23 = 1;\r\n                m.m31 = quad.p3.x;\r\n                m.m32 = quad.p3.y;\r\n                m.m33 = 1;\r\n                var adj = geom.Matrix2D.adjugate(m);\r\n                var v = adj.transform(quad.p4);\r\n                var ma = new geom.Matrix2D();\r\n                ma.m11 = v.x;\r\n                ma.m22 = v.y;\r\n                ma.m33 = v.w;\r\n                return m.append(ma);\r\n            };\r\n            MatrixFit.affine2D = function (from, to) {\r\n                if (from.length != to.length || from.length < 1)\r\n                    throw new Error(\"Size missmatch: 'from' and 'to' must be of same size.\");\r\n                var from_pt = [];\r\n                var to_pt = [];\r\n                var l = from.length;\r\n                for (var i = 0; i < l; ++i) {\r\n                    from_pt.push([from[i].x, from[i].y]);\r\n                    to_pt.push([to[i].x, to[i].y]);\r\n                }\r\n                var sol = this.solve(from_pt, to_pt);\r\n                var matrix = new geom.Matrix2D();\r\n                return matrix.setData([\r\n                    sol[0][0],\r\n                    sol[0][1],\r\n                    sol[1][0],\r\n                    sol[1][1],\r\n                    sol[2][0],\r\n                    sol[2][1]]);\r\n            };\r\n            MatrixFit.affine3D = function (from, to) {\r\n                if (from.length != to.length || from.length < 1)\r\n                    throw new Error(\"Size missmatch: 'from' and 'to' must be of same size.\");\r\n                var from_pt = [];\r\n                var to_pt = [];\r\n                var l = from.length;\r\n                for (var i = 0; i < l; ++i) {\r\n                    from_pt.push([from[i].x, from[i].y, from[i].z]);\r\n                    to_pt.push([to[i].x, to[i].y, to[i].z]);\r\n                }\r\n                var sol = this.solve(from_pt, to_pt);\r\n                var matrix = new geom.Matrix3D();\r\n                return matrix.setData([\r\n                    sol[0][0],\r\n                    sol[0][1],\r\n                    sol[0][2],\r\n                    0,\r\n                    sol[1][0],\r\n                    sol[1][1],\r\n                    sol[1][2],\r\n                    0,\r\n                    sol[2][0],\r\n                    sol[2][1],\r\n                    sol[2][2],\r\n                    0,\r\n                    sol[3][0],\r\n                    sol[3][1],\r\n                    sol[3][2],\r\n                    1\r\n                ]);\r\n            };\r\n            MatrixFit.solve = function (from, to) {\r\n                if (from.length != to.length || from.length < 1)\r\n                    throw new Error(\"Size missmatch: 'from' and 'to' must be of same size.\");\r\n                if (from[0].length != to[0].length)\r\n                    throw new Error(\"Dimension missmatch: 'from' has the dimension \" + from[0].length + \" and 'to' \" + to[0].length + \".\");\r\n                if (from.length < from[0].length + 1)\r\n                    throw new Error(\"Too few points: under-determined system, you need \" + (from[0].length + 1 - from.length) + \" more reference points for a 'overconstrained' system.\");\r\n                var dim = from[0].length;\r\n                var i;\r\n                var j;\r\n                var k;\r\n                var e;\r\n                var acc = [];\r\n                for (i = 0; i < dim + 1; ++i) {\r\n                    acc[i] = [];\r\n                    for (j = 0; j < dim; ++j)\r\n                        acc[i][j] = 0;\r\n                }\r\n                for (i = 0; i < dim + 1; ++i)\r\n                    for (j = 0; j < dim; ++j)\r\n                        for (k = 0; k < from.length; ++k) {\r\n                            e = from[k].slice();\r\n                            e.push(1);\r\n                            acc[i][j] += e[i] * to[k][j];\r\n                        }\r\n                var Q = [];\r\n                for (i = 0; i < dim + 1; ++i) {\r\n                    Q[i] = [];\r\n                    for (j = 0; j < dim + 1; ++j)\r\n                        Q[i][j] = 0;\r\n                }\r\n                for (k = 0; k < from.length; ++k) {\r\n                    e = from[k].slice();\r\n                    e.push(1);\r\n                    for (i = 0; i < dim + 1; ++i)\r\n                        for (j = 0; j < dim + 1; ++j)\r\n                            Q[i][j] += e[i] * e[j];\r\n                }\r\n                var matrix = [];\r\n                for (i = 0; i < dim + 1; ++i) {\r\n                    matrix[i] = Q[i].slice();\r\n                    for (j = 0; j < dim; ++j)\r\n                        matrix[i].push(acc[i][j]);\r\n                }\r\n                var solved = this.gaussJordan(matrix);\r\n                if (!solved)\r\n                    throw new Error(\"Could not solve affine transformation. Singular matrix: points are probably coplanar.\");\r\n                var l = matrix.length;\r\n                var off = matrix[0].length - dim;\r\n                for (i = 0; i < l; ++i)\r\n                    matrix[i] = matrix[i].slice(off);\r\n                return matrix;\r\n            };\r\n            MatrixFit.transform = function (matrix, vector, result) {\r\n                if (result === void 0) { result = null; }\r\n                var dim = vector.length;\r\n                result = result || [];\r\n                for (var i = 0; i < dim; ++i)\r\n                    result[i] = 0;\r\n                for (i = 0; i < dim; ++i) {\r\n                    for (var j = 0; j < dim; ++j)\r\n                        result[i] += vector[j] * matrix[j][i];\r\n                    result[i] += matrix[dim][i];\r\n                }\r\n                return result;\r\n            };\r\n            MatrixFit.gaussJordan = function (matrix) {\r\n                var i;\r\n                var j;\r\n                var k;\r\n                var h = matrix.length;\r\n                var w = matrix[0].length;\r\n                for (i = 0; i < h - 1; ++i) {\r\n                    var maxrow = i;\r\n                    for (j = i + 1; j < h; ++j)\r\n                        if (Math.abs(matrix[j][i]) > Math.abs(matrix[maxrow][i]))\r\n                            maxrow = j;\r\n                    var tmp = matrix[maxrow];\r\n                    matrix[maxrow] = matrix[i];\r\n                    matrix[i] = tmp;\r\n                    if (Math.abs(matrix[i][i]) <= 1e-10)\r\n                        return false;\r\n                    for (j = i + 1; j < h; ++j) {\r\n                        var c = matrix[j][i] / matrix[i][i];\r\n                        for (k = i; k < w; ++k)\r\n                            matrix[j][k] -= matrix[i][k] * c;\r\n                    }\r\n                }\r\n                for (i = h - 1; i >= 0; --i) {\r\n                    c = matrix[i][i];\r\n                    for (j = 0; j < i; ++j)\r\n                        for (k = w - 1; k >= i; --k)\r\n                            matrix[j][k] -= matrix[i][k] * matrix[j][i] / c;\r\n                    matrix[i][i] /= c;\r\n                    for (k = h; k < w; ++k)\r\n                        matrix[i][k] /= c;\r\n                }\r\n                return true;\r\n            };\r\n            return MatrixFit;\r\n        })();\r\n        geom.MatrixFit = MatrixFit;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/MatrixUtil.ts",
      "size": 1435,
      "sizeMinified": 565,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var MatrixUtil = (function () {\r\n            function MatrixUtil() {\r\n            }\r\n            MatrixUtil.lookAt = function (eye, target, up) {\r\n                var x = MatrixUtil.tempAxeX;\r\n                var y = MatrixUtil.tempAxeY;\r\n                var z = MatrixUtil.tempAxeZ;\r\n                z.difference(eye, target).normalize();\r\n                if (z.length() === 0) {\r\n                    z.z = 1;\r\n                }\r\n                x.crossSet(up, z).normalize();\r\n                if (x.length() === 0) {\r\n                    z.x += 0.0001;\r\n                    x.crossSet(up, z).normalize();\r\n                }\r\n                y.crossSet(z, x);\r\n                var m = new geom.Matrix3D();\r\n                m.m11 = x.x;\r\n                m.m12 = x.y;\r\n                m.m13 = x.z;\r\n                m.m21 = y.x;\r\n                m.m22 = y.y;\r\n                m.m23 = y.z;\r\n                m.m31 = z.x;\r\n                m.m32 = z.y;\r\n                m.m33 = z.z;\r\n                return m;\r\n            };\r\n            MatrixUtil.tempAxeX = new geom.Point3D();\r\n            MatrixUtil.tempAxeY = new geom.Point3D();\r\n            MatrixUtil.tempAxeZ = new geom.Point3D();\r\n            return MatrixUtil;\r\n        })();\r\n        geom.MatrixUtil = MatrixUtil;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/Point2D.ts",
      "size": 7562,
      "sizeMinified": 2885,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Point2D = (function () {\r\n            function Point2D(x, y, w) {\r\n                if (x === void 0) { x = 0; }\r\n                if (y === void 0) { y = 0; }\r\n                if (w === void 0) { w = 1; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.w = w;\r\n            }\r\n            Point2D.create = function (x, y, w) {\r\n                if (x === void 0) { x = 0; }\r\n                if (y === void 0) { y = 0; }\r\n                if (w === void 0) { w = 1; }\r\n                return new Point2D(x, y, w);\r\n            };\r\n            Point2D.prototype.getData = function (length) {\r\n                if (length === void 0) { length = 2; }\r\n                if (length > 2)\r\n                    return [this.x, this.y, this.w];\r\n                return [this.x, this.y];\r\n            };\r\n            Point2D.prototype.setData = function (data, offset, length) {\r\n                if (offset === void 0) { offset = 0; }\r\n                if (length === void 0) { length = 2; }\r\n                if (data === undefined)\r\n                    return;\r\n                this.x = data[0 + offset];\r\n                this.y = data[1 + offset];\r\n                if (length > 2)\r\n                    this.w = data[2 + offset];\r\n                return this;\r\n            };\r\n            Point2D.prototype.copyFrom = function (pt) {\r\n                this.x = pt.x;\r\n                this.y = pt.y;\r\n                this.w = pt.w === undefined ? 1 : pt.w;\r\n                return this;\r\n            };\r\n            Point2D.prototype.copyTo = function (target) {\r\n                target.x = this.x;\r\n                target.y = this.y;\r\n                if (target.w !== undefined)\r\n                    target.w = this.w;\r\n                return this;\r\n            };\r\n            Point2D.prototype.equals = function (point) {\r\n                return point.x == this.x && point.y == this.y && this.w == (point.w === undefined ? 1 : point.w);\r\n            };\r\n            Point2D.prototype.length = function () {\r\n                return Math.sqrt(this.x * this.x + this.y * this.y);\r\n            };\r\n            Point2D.prototype.normalize = function (length) {\r\n                if (length === void 0) { length = 1; }\r\n                var len = this.length();\r\n                if (!len)\r\n                    return;\r\n                this.scaleBy(length / len);\r\n            };\r\n            Point2D.prototype.clamp = function (length) {\r\n                var len = this.length();\r\n                if (!len || len <= length)\r\n                    return;\r\n                this.scaleBy(length / len);\r\n            };\r\n            Point2D.prototype.scaleBy = function (scale) {\r\n                this.x *= scale;\r\n                this.y *= scale;\r\n                return this;\r\n            };\r\n            Point2D.prototype.mul = function (pt) {\r\n                this.x *= pt.x;\r\n                this.y *= pt.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.product = function (factorA, factorB) {\r\n                this.x = factorA.x * factorB.x;\r\n                this.y = factorA.y * factorB.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.div = function (pt) {\r\n                this.x /= pt.x;\r\n                this.y /= pt.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.quotient = function (divident, divisor) {\r\n                this.x = divident.x / divisor.x;\r\n                this.y = divident.y / divisor.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.dot = function (pt) {\r\n                return this.x * pt.x + this.y * pt.y;\r\n            };\r\n            Point2D.prototype.add = function (pt) {\r\n                this.x += pt.x;\r\n                this.y += pt.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.translate = function (x, y) {\r\n                this.x += x;\r\n                this.y += y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.sum = function (sumA, sumB) {\r\n                this.x = sumA.x + sumB.x;\r\n                this.y = sumA.y + sumB.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.sub = function (pt) {\r\n                this.x -= pt.x;\r\n                this.y -= pt.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.difference = function (minuend, subtrahend) {\r\n                this.x = minuend.x - subtrahend.x;\r\n                this.y = minuend.y - subtrahend.y;\r\n                return this;\r\n            };\r\n            Point2D.prototype.clone = function () {\r\n                return new Point2D(this.x, this.y);\r\n            };\r\n            Point2D.prototype.setTo = function (x, y, w) {\r\n                if (w === void 0) { w = 1; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.w = w;\r\n                return this;\r\n            };\r\n            Point2D.prototype.cross = function (pt) {\r\n                var x = this.x;\r\n                var y = this.y;\r\n                this.x = y * pt.x - x * pt.y;\r\n                this.y = x * pt.y - y * pt.x;\r\n                return this;\r\n            };\r\n            Point2D.interpolate = function (v0, v1, f, ret) {\r\n                if (ret === void 0) { ret = new Point2D(); }\r\n                return ret.setTo(v0.x + (v1.x - v0.x) * f, v0.y + (v1.y - v0.y) * f);\r\n            };\r\n            Point2D.polar = function (angle, length, ret) {\r\n                if (ret === void 0) { ret = new Point2D(); }\r\n                var angRad = angle * jsidea.math.Number.DEG_TO_RAD;\r\n                return ret.setTo(Math.cos(angRad) * length, Math.sin(angRad) * length);\r\n            };\r\n            Point2D.distance = function (v0, v1) {\r\n                var dx = v0.x - v1.x;\r\n                var dy = v0.y - v1.y;\r\n                return Math.sqrt(dx * dx + dy * dy);\r\n            };\r\n            Point2D.reflect = function (direction, normal, ret) {\r\n                if (ret === void 0) { ret = new Point2D(); }\r\n                var dp = direction.x * normal.x + direction.y * normal.y;\r\n                return ret.setTo(direction.x - 2 * dp * normal.x, direction.y - 2 * dp * normal.y);\r\n            };\r\n            Point2D.intersection = function (p1, p2, p3, p4, ret) {\r\n                if (ret === void 0) { ret = new Point2D(); }\r\n                var x1 = p1.x;\r\n                var y1 = p1.y;\r\n                var x4 = p4.x;\r\n                var y4 = p4.y;\r\n                var dx1 = p2.x - x1;\r\n                var dx2 = p3.x - x4;\r\n                if (!dx1 && !dx2)\r\n                    return null;\r\n                var m1 = (p2.y - y1) / dx1;\r\n                var m2 = (p3.y - y4) / dx2;\r\n                if (!dx1)\r\n                    return ret.setTo(x1, m2 * (x1 - x4) + y4);\r\n                else if (!dx2)\r\n                    return ret.setTo(x4, m1 * (x4 - x1) + y1);\r\n                var xInt = (-m2 * x4 + y4 + m1 * x1 - y1) / (m1 - m2);\r\n                var yInt = m1 * (xInt - x1) + y1;\r\n                if (isNaN(xInt) || isNaN(yInt))\r\n                    return null;\r\n                return ret.setTo(xInt, yInt);\r\n            };\r\n            Point2D.X_AXIS = new Point2D(1, 0);\r\n            Point2D.Y_AXIS = new Point2D(0, 1);\r\n            return Point2D;\r\n        })();\r\n        geom.Point2D = Point2D;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/Point3D.ts",
      "size": 7683,
      "sizeMinified": 2919,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Point3D = (function () {\r\n            function Point3D(x, y, z, w) {\r\n                if (x === void 0) { x = 0; }\r\n                if (y === void 0) { y = 0; }\r\n                if (z === void 0) { z = 0; }\r\n                if (w === void 0) { w = 1; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.z = z;\r\n                this.w = w;\r\n            }\r\n            Point3D.create = function (x, y, z, w) {\r\n                if (x === void 0) { x = 0; }\r\n                if (y === void 0) { y = 0; }\r\n                if (z === void 0) { z = 0; }\r\n                if (w === void 0) { w = 1; }\r\n                return new Point3D(x, y, z, w);\r\n            };\r\n            Point3D.prototype.getData = function () {\r\n                return [this.x, this.y, this.z];\r\n            };\r\n            Point3D.prototype.setData = function (data, offset) {\r\n                if (offset === void 0) { offset = 0; }\r\n                if (data === undefined)\r\n                    return;\r\n                this.x = data[0 + offset];\r\n                this.y = data[1 + offset];\r\n                this.z = data[2 + offset];\r\n                this.w = data.length > (3 + offset) ? data[3 + offset] : 1;\r\n            };\r\n            Point3D.prototype.copyFrom = function (pt) {\r\n                this.x = pt.x;\r\n                this.y = pt.y;\r\n                this.z = pt.z;\r\n                this.w = pt.w;\r\n                return this;\r\n            };\r\n            Point3D.prototype.copyTo = function (target) {\r\n                target.x = this.x;\r\n                target.y = this.y;\r\n                target.z = this.z;\r\n                target.w = this.w;\r\n                return this;\r\n            };\r\n            Point3D.prototype.equals = function (point) {\r\n                return point.x == this.x && point.y == this.y && point.z == this.z;\r\n            };\r\n            Point3D.prototype.length = function () {\r\n                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n            };\r\n            Point3D.prototype.normalize = function (length) {\r\n                if (length === void 0) { length = 1; }\r\n                var len = this.length();\r\n                if (!len)\r\n                    return;\r\n                this.scaleBy(length / len);\r\n            };\r\n            Point3D.prototype.clamp = function (length) {\r\n                var len = this.length();\r\n                if (!len || len <= length)\r\n                    return;\r\n                this.scaleBy(length / len);\r\n            };\r\n            Point3D.prototype.scaleBy = function (scale) {\r\n                this.x *= scale;\r\n                this.y *= scale;\r\n                this.z *= scale;\r\n                return this;\r\n            };\r\n            Point3D.prototype.setTo = function (x, y, z, w) {\r\n                if (w === void 0) { w = 1; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.z = z;\r\n                this.w = w;\r\n                return this;\r\n            };\r\n            Point3D.prototype.cross = function (pt) {\r\n                var x = this.x;\r\n                var y = this.y;\r\n                var z = this.z;\r\n                this.x = y * pt.z - z * pt.y;\r\n                this.y = z * pt.x - x * pt.z;\r\n                this.z = x * pt.y - y * pt.x;\r\n                return this;\r\n            };\r\n            Point3D.prototype.crossSet = function (a, b) {\r\n                var ax = a.x;\r\n                var ay = a.y;\r\n                var az = a.z;\r\n                var bx = b.x;\r\n                var by = b.y;\r\n                var bz = b.z;\r\n                this.x = ay * bz - az * by;\r\n                this.y = az * bx - ax * bz;\r\n                this.z = ax * by - ay * bx;\r\n                return this;\r\n            };\r\n            Point3D.prototype.mul = function (pt) {\r\n                this.x *= pt.x;\r\n                this.y *= pt.y;\r\n                this.z *= pt.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.product = function (factorA, factorB) {\r\n                this.x = factorA.x * factorB.x;\r\n                this.y = factorA.y * factorB.y;\r\n                this.z = factorA.z * factorB.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.div = function (divisor) {\r\n                this.x /= divisor.x;\r\n                this.y /= divisor.y;\r\n                this.z /= divisor.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.quotient = function (divident, divisor) {\r\n                this.x = divident.x / divisor.x;\r\n                this.y = divident.y / divisor.y;\r\n                this.z = divident.z / divisor.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.dot = function (pt) {\r\n                return this.x * pt.x + this.y * pt.y + this.z * pt.z;\r\n            };\r\n            Point3D.prototype.add = function (summand) {\r\n                this.x += summand.x;\r\n                this.y += summand.y;\r\n                this.z += summand.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.translate = function (x, y, z) {\r\n                this.x += x;\r\n                this.y += y;\r\n                this.z += z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.sum = function (summandA, summandB) {\r\n                this.x = summandA.x + summandB.x;\r\n                this.y = summandA.y + summandB.y;\r\n                this.z = summandA.z + summandB.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.sub = function (subtrahend) {\r\n                this.x -= subtrahend.x;\r\n                this.y -= subtrahend.y;\r\n                this.z -= subtrahend.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.difference = function (minuend, subtrahend) {\r\n                this.x = minuend.x - subtrahend.x;\r\n                this.y = minuend.y - subtrahend.y;\r\n                this.z = minuend.z - subtrahend.z;\r\n                return this;\r\n            };\r\n            Point3D.prototype.clone = function () {\r\n                return new Point3D(this.x, this.y, this.z, this.w);\r\n            };\r\n            Point3D.interpolate = function (v0, v1, f) {\r\n                return new Point3D(v0.x + (v1.x - v0.x) * f, v0.y + (v1.y - v0.y) * f, v0.z + (v1.z - v0.z) * f);\r\n            };\r\n            Point3D.polar = function (angle, length, ret) {\r\n                if (ret === void 0) { ret = new Point3D(); }\r\n                var angRad = angle.x * jsidea.math.Number.DEG_TO_RAD;\r\n                ret.x = Math.cos(angRad) * length;\r\n                ret.y = Math.sin(angRad) * length;\r\n                return ret;\r\n            };\r\n            Point3D.distance = function (v0, v1) {\r\n                var dx = v0.x - v1.x;\r\n                var dy = v0.y - v1.y;\r\n                var dz = v0.z - v1.z;\r\n                return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n            };\r\n            Point3D.reflect = function (vector, normal) {\r\n                var dp = vector.x * normal.x + vector.y * normal.y + vector.z * normal.z;\r\n                return new Point3D(vector.x - 2 * dp * normal.x, vector.y - 2 * dp * normal.y, vector.z - 2 * dp * normal.z);\r\n            };\r\n            Point3D.X_AXIS = new Point3D(1, 0, 0);\r\n            Point3D.Y_AXIS = new Point3D(0, 1, 0);\r\n            Point3D.Z_AXIS = new Point3D(0, 0, 1);\r\n            return Point3D;\r\n        })();\r\n        geom.Point3D = Point3D;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/Quad.ts",
      "size": 2143,
      "sizeMinified": 1003,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Quad = (function () {\r\n            function Quad(p1, p2, p3, p4) {\r\n                if (p1 === void 0) { p1 = new geom.Point3D(); }\r\n                if (p2 === void 0) { p2 = new geom.Point3D(); }\r\n                if (p3 === void 0) { p3 = new geom.Point3D(); }\r\n                if (p4 === void 0) { p4 = new geom.Point3D(); }\r\n                this.p1 = p1;\r\n                this.p2 = p2;\r\n                this.p3 = p3;\r\n                this.p4 = p4;\r\n                this.points = [];\r\n                this.points = [this.p1, this.p2, this.p3, this.p4];\r\n            }\r\n            Quad.prototype.clone = function () {\r\n                return new Quad(this.p1.clone(), this.p2.clone(), this.p3.clone(), this.p4.clone());\r\n            };\r\n            Quad.prototype.setRect = function (x, y, width, height) {\r\n                this.p1.x = x;\r\n                this.p1.y = y;\r\n                this.p2.x = x + width;\r\n                this.p2.y = y;\r\n                this.p3.x = x;\r\n                this.p3.y = y + height;\r\n                this.p4.x = x + width;\r\n                this.p4.y = y + height;\r\n                return this;\r\n            };\r\n            Quad.prototype.setData = function (data) {\r\n                this.p1.copyFrom(data[0]);\r\n                this.p2.copyFrom(data[1]);\r\n                this.p3.copyFrom(data[2]);\r\n                this.p4.copyFrom(data[3]);\r\n                return this;\r\n            };\r\n            Quad.prototype.setTo = function (p1, p2, p3, p4) {\r\n                this.p1.copyFrom(p1);\r\n                this.p2.copyFrom(p2);\r\n                this.p3.copyFrom(p3);\r\n                this.p4.copyFrom(p4);\r\n                return this;\r\n            };\r\n            Quad.prototype.copyFrom = function (value) {\r\n                return this.setTo(value.p1, value.p2, value.p3, value.p4);\r\n            };\r\n            Quad.prototype.dispose = function () {\r\n            };\r\n            return Quad;\r\n        })();\r\n        geom.Quad = Quad;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/geom/Rect2D.ts",
      "size": 6903,
      "sizeMinified": 3043,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var geom;\r\n    (function (geom) {\r\n        var Rect2D = (function () {\r\n            function Rect2D(x, y, width, height) {\r\n                if (x === void 0) { x = 0; }\r\n                if (y === void 0) { y = 0; }\r\n                if (width === void 0) { width = 0; }\r\n                if (height === void 0) { height = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            Rect2D.prototype.clone = function () {\r\n                return new Rect2D(this.x, this.y, this.width, this.height);\r\n            };\r\n            Rect2D.prototype.setTo = function (x, y, width, height) {\r\n                this.x = x;\r\n                this.y = y;\r\n                this.width = width;\r\n                this.height = height;\r\n                return this;\r\n            };\r\n            Rect2D.prototype.toQuad = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Quad(); }\r\n                ret.p1.x = this.x;\r\n                ret.p1.y = this.y;\r\n                ret.p2.x = this.right;\r\n                ret.p2.y = this.y;\r\n                ret.p3.x = this.right;\r\n                ret.p3.y = this.bottom;\r\n                ret.p4.x = this.x;\r\n                ret.p4.y = this.bottom;\r\n                return ret;\r\n            };\r\n            Rect2D.prototype.setCSS = function (clipCSS) {\r\n                if (!clipCSS || clipCSS == \"auto\")\r\n                    return this;\r\n                var str = clipCSS.toLowerCase().replace(\"rect(\", \"\").replace(\")\", \"\");\r\n                var values = jsidea.system.Engine.isWebKit ? str.split(\" \") : str.split(\",\");\r\n                this.x = jsidea.math.Number.parse(values[3], 0);\r\n                this.y = jsidea.math.Number.parse(values[0], 0);\r\n                this.width = jsidea.math.Number.parse(values[1], 0) - this.x;\r\n                this.height = jsidea.math.Number.parse(values[2], 0) - this.y;\r\n                return this;\r\n            };\r\n            Rect2D.prototype.getCSS = function () {\r\n                return \"rect(\"\r\n                    + Math.round(this.y) + \"px, \"\r\n                    + Math.round(this.right) + \"px, \"\r\n                    + Math.round(this.bottom) + \"px, \"\r\n                    + Math.round(this.x) + \"px)\";\r\n            };\r\n            Rect2D.prototype.copyFrom = function (value) {\r\n                this.x = value.x;\r\n                this.y = value.y;\r\n                this.width = value.width;\r\n                this.height = value.height;\r\n            };\r\n            Rect2D.prototype.center = function (ret) {\r\n                if (ret === void 0) { ret = new geom.Point2D(); }\r\n                return ret.setTo(this.x + this.width * 0.5, this.y + this.width * 0.5);\r\n            };\r\n            Rect2D.prototype.equals = function (value, difference) {\r\n                if (difference === void 0) { difference = 0; }\r\n                return Math.abs(this.x - value.x) <= difference\r\n                    && Math.abs(this.y - value.y) <= difference\r\n                    && Math.abs(this.width - value.width) <= difference\r\n                    && Math.abs(this.height - value.height) <= difference;\r\n            };\r\n            Rect2D.prototype.contains = function (x, y) {\r\n                return x >= this.x\r\n                    && x <= (this.x + this.width)\r\n                    && y >= this.y\r\n                    && y <= (this.y + this.height);\r\n            };\r\n            Rect2D.prototype.containsRect = function (r) {\r\n                if (!this.contains(r.x, r.y)\r\n                    || !this.contains(r.x + r.width, r.y + r.height)\r\n                    || !this.contains(r.x + r.width, r.y)\r\n                    || !this.contains(r.x, r.y + r.height))\r\n                    return false;\r\n                return true;\r\n            };\r\n            Rect2D.prototype.intersects = function (r) {\r\n                if (this.contains(r.x, r.y)\r\n                    || this.contains(r.x + r.width, r.y + r.height)\r\n                    || this.contains(r.x + r.width, r.y)\r\n                    || this.contains(r.x, r.y + r.height))\r\n                    return true;\r\n                return false;\r\n            };\r\n            Rect2D.prototype.copyFromClientRect = function (rect) {\r\n                this.x = rect.left;\r\n                this.y = rect.top;\r\n                this.width = rect.width;\r\n                this.height = rect.height;\r\n                return this;\r\n            };\r\n            Object.defineProperty(Rect2D.prototype, \"right\", {\r\n                get: function () {\r\n                    return this.x + this.width;\r\n                },\r\n                set: function (value) {\r\n                    this.width = value - this.x;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Object.defineProperty(Rect2D.prototype, \"bottom\", {\r\n                get: function () {\r\n                    return this.y + this.height;\r\n                },\r\n                set: function (value) {\r\n                    this.height = value - this.y;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Rect2D.getBounds = function (element, ret) {\r\n                if (ret === void 0) { ret = new Rect2D(); }\r\n                ret.copyFromClientRect(element.getBoundingClientRect());\r\n                if (jsidea.system.Engine.isWebKit) {\r\n                    ret.x += document.body.scrollLeft;\r\n                    ret.y += document.body.scrollTop;\r\n                }\r\n                else {\r\n                    ret.x += document.documentElement.scrollLeft;\r\n                    ret.y += document.documentElement.scrollTop;\r\n                }\r\n                return ret;\r\n            };\r\n            Rect2D.getClip = function (element, style, ret) {\r\n                if (ret === void 0) { ret = new geom.Rect2D(); }\r\n                if (!style.clip || style.clip == \"auto\") {\r\n                    ret.x = 0;\r\n                    ret.y = 0;\r\n                    ret.width = element.offsetWidth;\r\n                    ret.height = element.offsetHeight;\r\n                    return ret;\r\n                }\r\n                ret.setCSS(style.clip);\r\n                return ret;\r\n            };\r\n            Rect2D.prototype.dispose = function () {\r\n            };\r\n            Rect2D.prototype.toString = function () {\r\n                return \"[ jsidea.geom.Box2D\"\r\n                    + \" x=\" + this.x\r\n                    + \" y=\" + this.y\r\n                    + \" width=\" + this.width\r\n                    + \" height=\" + this.height\r\n                    + \"]\";\r\n            };\r\n            return Rect2D;\r\n        })();\r\n        geom.Rect2D = Rect2D;\r\n    })(geom = jsidea.geom || (jsidea.geom = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/Box.ts",
      "size": 8432,
      "sizeMinified": 4157,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var Box = (function () {\r\n            function Box(element, style) {\r\n                this.element = null;\r\n                this.offsetWidth = 0;\r\n                this.offsetHeight = 0;\r\n                this.parentWidth = 0;\r\n                this.parentHeight = 0;\r\n                this.marginTop = 0;\r\n                this.marginRight = 0;\r\n                this.marginBottom = 0;\r\n                this.marginLeft = 0;\r\n                this.borderTop = 0;\r\n                this.borderRight = 0;\r\n                this.borderBottom = 0;\r\n                this.borderLeft = 0;\r\n                this.paddingTop = 0;\r\n                this.paddingRight = 0;\r\n                this.paddingBottom = 0;\r\n                this.paddingLeft = 0;\r\n                this.scrollLeft = 0;\r\n                this.scrollTop = 0;\r\n                if (element)\r\n                    this.update(element, style);\r\n            }\r\n            Box.create = function (element, style) {\r\n                return new Box(element, style);\r\n            };\r\n            Box.prototype.update = function (element, style) {\r\n                if (!element)\r\n                    return this.clear();\r\n                style = style || window.getComputedStyle(element);\r\n                this.style = style;\r\n                this.element = element;\r\n                this.offsetWidth = element.offsetWidth;\r\n                this.offsetHeight = element.offsetHeight;\r\n                this.scrollLeft = element.scrollLeft;\r\n                this.scrollTop = element.scrollTop;\r\n                if (jsidea.system.Engine.isWebKit) {\r\n                    if (element == element.ownerDocument.body) {\r\n                        this.scrollLeft = 0;\r\n                        this.scrollTop = 0;\r\n                    }\r\n                    else if (jsidea.system.Engine.isWebKit && element == element.ownerDocument.documentElement) {\r\n                        this.scrollLeft = element.ownerDocument.body.scrollLeft;\r\n                        this.scrollTop = element.ownerDocument.body.scrollTop;\r\n                    }\r\n                }\r\n                if (element.parentElement) {\r\n                    this.parentWidth = element.parentElement.clientWidth;\r\n                    this.parentHeight = element.parentElement.clientHeight;\r\n                }\r\n                else {\r\n                    this.parentWidth = window.innerWidth;\r\n                    this.parentHeight = window.innerHeight;\r\n                }\r\n                var w = this.parentWidth;\r\n                var h = this.parentHeight;\r\n                this.marginTop = jsidea.math.Number.relation(style.marginTop, h, 0);\r\n                this.marginRight = jsidea.math.Number.relation(style.marginRight, w, 0);\r\n                this.marginBottom = jsidea.math.Number.relation(style.marginBottom, h, 0);\r\n                this.marginLeft = jsidea.math.Number.relation(style.marginLeft, w, 0);\r\n                this.paddingTop = jsidea.math.Number.relation(style.paddingTop, h, 0);\r\n                this.paddingRight = jsidea.math.Number.relation(style.paddingRight, w, 0);\r\n                this.paddingBottom = jsidea.math.Number.relation(style.paddingBottom, h, 0);\r\n                this.paddingLeft = jsidea.math.Number.relation(style.paddingLeft, w, 0);\r\n                this.borderTop = jsidea.math.Number.parse(style.borderTopWidth, 0);\r\n                this.borderRight = jsidea.math.Number.parse(style.borderRightWidth, 0);\r\n                this.borderBottom = jsidea.math.Number.parse(style.borderBottomWidth, 0);\r\n                this.borderLeft = jsidea.math.Number.parse(style.borderLeftWidth, 0);\r\n                return this;\r\n            };\r\n            Box.prototype.copyFrom = function (size) {\r\n                this.element = size.element;\r\n                this.style = size.style;\r\n                this.offsetWidth = size.offsetWidth;\r\n                this.offsetHeight = size.offsetHeight;\r\n                this.parentWidth = size.parentWidth;\r\n                this.parentHeight = size.parentHeight;\r\n                this.marginTop = size.marginTop;\r\n                this.marginRight = size.marginRight;\r\n                this.marginBottom = size.marginBottom;\r\n                this.marginLeft = size.marginLeft;\r\n                this.paddingTop = size.paddingTop;\r\n                this.paddingRight = size.paddingRight;\r\n                this.paddingBottom = size.paddingBottom;\r\n                this.paddingLeft = size.paddingLeft;\r\n                this.borderTop = size.borderTop;\r\n                this.borderRight = size.borderRight;\r\n                this.borderBottom = size.borderBottom;\r\n                this.borderLeft = size.borderLeft;\r\n                return this;\r\n            };\r\n            Box.prototype.clone = function () {\r\n                return (new Box()).copyFrom(this);\r\n            };\r\n            Box.prototype.clear = function () {\r\n                this.element = null;\r\n                this.style = null;\r\n                this.scrollLeft = 0;\r\n                this.scrollTop = 0;\r\n                this.offsetWidth = 0;\r\n                this.offsetHeight = 0;\r\n                this.parentWidth = 0;\r\n                this.parentHeight = 0;\r\n                this.marginTop = 0;\r\n                this.marginRight = 0;\r\n                this.marginBottom = 0;\r\n                this.marginLeft = 0;\r\n                this.paddingTop = 0;\r\n                this.paddingRight = 0;\r\n                this.paddingBottom = 0;\r\n                this.paddingLeft = 0;\r\n                this.borderTop = 0;\r\n                this.borderRight = 0;\r\n                this.borderBottom = 0;\r\n                this.borderLeft = 0;\r\n                return this;\r\n            };\r\n            Box.prototype.apply = function (element) {\r\n                var style = element.style;\r\n                style.marginTop = this.marginTop + \"px\";\r\n                style.marginRight = this.marginRight + \"px\";\r\n                style.marginBottom = this.marginBottom + \"px\";\r\n                style.marginLeft = this.marginLeft + \"px\";\r\n                style.paddingTop = this.paddingTop + \"px\";\r\n                style.paddingRight = this.paddingRight + \"px\";\r\n                style.paddingBottom = this.paddingBottom + \"px\";\r\n                style.paddingLeft = this.paddingLeft + \"px\";\r\n                style.borderTop = this.borderTop + \"px\";\r\n                style.borderRight = this.borderRight + \"px\";\r\n                style.borderBottom = this.borderBottom + \"px\";\r\n                style.borderLeft = this.borderLeft + \"px\";\r\n                return this;\r\n            };\r\n            Box.prototype.bounds = function (boxModel, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Rect2D(); }\r\n                boxModel = boxModel || layout.BoxModel.BORDER;\r\n                toBox = toBox || layout.BoxModel.BORDER;\r\n                var pt = new jsidea.geom.Point3D(0, 0);\r\n                this.transform(pt, boxModel, toBox);\r\n                ret.x = pt.x;\r\n                ret.y = pt.y;\r\n                ret.width = boxModel.width(this);\r\n                ret.height = boxModel.height(this);\r\n                return ret;\r\n            };\r\n            Box.prototype.transform = function (point, fromBox, toBox) {\r\n                if (toBox == fromBox)\r\n                    return point;\r\n                if (fromBox)\r\n                    fromBox.toBorderBox(this, point);\r\n                if (toBox)\r\n                    toBox.fromBorderBox(this, point);\r\n                return point;\r\n            };\r\n            Box.prototype.width = function (boxModel) {\r\n                return (boxModel || layout.BoxModel.BORDER).width(this);\r\n            };\r\n            Box.prototype.height = function (boxModel) {\r\n                return (boxModel || layout.BoxModel.BORDER).height(this);\r\n            };\r\n            Box.prototype.dispose = function () {\r\n                this.clear();\r\n            };\r\n            Box.lookup = function (boxSizing) {\r\n                for (var model in layout.BoxModel) {\r\n                    if (model.name == boxSizing)\r\n                        return model;\r\n                }\r\n                return null;\r\n            };\r\n            return Box;\r\n        })();\r\n        layout.Box = Box;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Attachment.ts",
      "size": 3241,
      "sizeMinified": 1382,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Attachment = (function (_super) {\r\n                __extends(Attachment, _super);\r\n                function Attachment() {\r\n                    _super.apply(this, arguments);\r\n                    this.name = \"attachment-box\";\r\n                }\r\n                Attachment.prototype.getBackgroundBox = function (size, ret) {\r\n                    if (ret === void 0) { ret = new jsidea.geom.Rect2D(); }\r\n                    _super.prototype.getBackgroundBox.call(this, size, ret);\r\n                    var attachment = size.style.backgroundAttachment;\r\n                    if (attachment == \"scroll\") { }\r\n                    else if (attachment == \"local\") {\r\n                        ret.x -= size.scrollLeft;\r\n                        ret.y -= size.scrollTop;\r\n                    }\r\n                    else if (attachment == \"fixed\") {\r\n                        if (jsidea.system.Engine.isWebKit) {\r\n                            ret.x += size.element.ownerDocument.body.scrollLeft;\r\n                            ret.y += size.element.ownerDocument.body.scrollTop;\r\n                        }\r\n                        else {\r\n                            ret.x += size.element.ownerDocument.documentElement.scrollLeft;\r\n                            ret.y += size.element.ownerDocument.documentElement.scrollTop;\r\n                        }\r\n                        var trans = layout.Transform.create(size.element);\r\n                        var gl = trans.localToGlobal(0, 0, 0, BoxModel.PADDING, BoxModel.BORDER);\r\n                        ret.x -= gl.x;\r\n                        ret.y -= gl.y;\r\n                    }\r\n                    return ret;\r\n                };\r\n                Attachment.prototype.fromBorderBox = function (size, point) {\r\n                    var bb = this.getBackgroundBox(size);\r\n                    var scaleX = bb.width / this._imageWidth;\r\n                    var scaleY = bb.height / this._imageHeight;\r\n                    point.x -= bb.x;\r\n                    point.y -= bb.y;\r\n                    point.x /= scaleX;\r\n                    point.y /= scaleY;\r\n                };\r\n                Attachment.prototype.toBorderBox = function (size, point) {\r\n                    var bb = this.getBackgroundBox(size);\r\n                    var scaleX = bb.width / this._imageWidth;\r\n                    var scaleY = bb.height / this._imageHeight;\r\n                    point.x *= scaleX;\r\n                    point.y *= scaleY;\r\n                    point.x += bb.x;\r\n                    point.y += bb.y;\r\n                };\r\n                return Attachment;\r\n            })(BoxModel.Background);\r\n            BoxModel.ATTACHMENT = new Attachment();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Background.ts",
      "size": 5344,
      "sizeMinified": 2009,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Background = (function () {\r\n                function Background() {\r\n                    this.name = \"background-box\";\r\n                    this._image = new Image();\r\n                    this._point = new jsidea.geom.Point3D();\r\n                    this._imageWidth = 0;\r\n                    this._imageHeight = 0;\r\n                }\r\n                Background.prototype.getBackgroundBox = function (size, ret) {\r\n                    if (ret === void 0) { ret = new jsidea.geom.Rect2D(); }\r\n                    var src = size.style.backgroundImage.replace(/url\\((['\"])?(.*?)\\1\\)/gi, '$2').split(',')[0];\r\n                    var width;\r\n                    var height;\r\n                    if (!src || src == \"none\") {\r\n                        width = size.offsetWidth;\r\n                        height = size.offsetHeight;\r\n                    }\r\n                    else {\r\n                        this._image.src = src;\r\n                        width = this._image.width;\r\n                        height = this._image.height;\r\n                        if (isNaN(width))\r\n                            width = size.offsetWidth;\r\n                        if (isNaN(height))\r\n                            height = size.offsetHeight;\r\n                    }\r\n                    if (!width || !height)\r\n                        return ret.setTo(0, 0, size.offsetWidth, size.offsetHeight);\r\n                    this._imageWidth = width;\r\n                    this._imageHeight = height;\r\n                    var backgroundOrigin = size.style.backgroundOrigin ? layout.Box.lookup(size.style.backgroundOrigin) : BoxModel.PADDING;\r\n                    var origin = size.bounds(backgroundOrigin);\r\n                    var x = 0;\r\n                    var y = 0;\r\n                    var cssPos = size.style.backgroundPosition.split(\" \");\r\n                    var xPos = cssPos[0] || \"auto\";\r\n                    var yPos = cssPos[1] || \"auto\";\r\n                    var cssSize = size.style.backgroundSize.split(\" \");\r\n                    var xSize = cssSize[0] || \"auto\";\r\n                    var ySize = cssSize[1] || xSize;\r\n                    var scaleX = origin.width / width;\r\n                    var scaleY = origin.height / height;\r\n                    if (xSize == \"auto\") { }\r\n                    else if (xSize == \"cover\")\r\n                        width *= Math.max(scaleX, scaleY);\r\n                    else if (xSize == \"contain\")\r\n                        width *= Math.min(scaleX, scaleY);\r\n                    else\r\n                        width = jsidea.math.Number.relation(xSize, origin.width, origin.width);\r\n                    if (ySize == \"auto\") {\r\n                        if (xSize != \"auto\")\r\n                            height *= width / this._imageWidth;\r\n                    }\r\n                    else if (ySize == \"cover\")\r\n                        height *= Math.max(scaleX, scaleY);\r\n                    else if (ySize == \"contain\")\r\n                        height *= Math.min(scaleX, scaleY);\r\n                    else\r\n                        height = jsidea.math.Number.relation(ySize, origin.height, origin.height);\r\n                    if (xSize == \"auto\" && ySize != \"auto\")\r\n                        width *= height / this._imageHeight;\r\n                    if (xPos == \"auto\") { }\r\n                    else if (xPos.indexOf(\"%\") > 0)\r\n                        x = jsidea.math.Number.relation(xPos, origin.width, 0) - jsidea.math.Number.relation(xPos, width, 0);\r\n                    else\r\n                        x = jsidea.math.Number.relation(xPos, origin.width, 0);\r\n                    if (yPos == \"auto\") { }\r\n                    else if (yPos.indexOf(\"%\") > 0)\r\n                        y = jsidea.math.Number.relation(yPos, origin.height, 0) - jsidea.math.Number.relation(yPos, height, 0);\r\n                    else\r\n                        y = jsidea.math.Number.relation(yPos, origin.height, 0);\r\n                    var pt = size.transform(this._point.setTo(x, y, 0), backgroundOrigin, BoxModel.BORDER);\r\n                    return ret.setTo(pt.x, pt.y, width, height);\r\n                };\r\n                Background.prototype.fromBorderBox = function (size, point) {\r\n                    var bb = this.getBackgroundBox(size);\r\n                    point.x -= bb.x;\r\n                    point.y -= bb.y;\r\n                };\r\n                Background.prototype.toBorderBox = function (size, point) {\r\n                    var bb = this.getBackgroundBox(size);\r\n                    point.x += bb.x;\r\n                    point.y += bb.y;\r\n                };\r\n                Background.prototype.width = function (size) {\r\n                    return this.getBackgroundBox(size).width;\r\n                };\r\n                Background.prototype.height = function (size) {\r\n                    return this.getBackgroundBox(size).height;\r\n                };\r\n                return Background;\r\n            })();\r\n            BoxModel.Background = Background;\r\n            BoxModel.BACKGROUND = new Background();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Border.ts",
      "size": 969,
      "sizeMinified": 412,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Border = (function () {\r\n                function Border() {\r\n                    this.name = \"border-box\";\r\n                }\r\n                Border.prototype.fromBorderBox = function (size, point) {\r\n                };\r\n                Border.prototype.toBorderBox = function (size, point) {\r\n                };\r\n                Border.prototype.width = function (size) {\r\n                    return size.offsetWidth;\r\n                };\r\n                Border.prototype.height = function (size) {\r\n                    return size.offsetHeight;\r\n                };\r\n                return Border;\r\n            })();\r\n            BoxModel.BORDER = new Border();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Canvas.ts",
      "size": 3258,
      "sizeMinified": 1365,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Canvas = (function () {\r\n                function Canvas() {\r\n                    this.name = \"canvas-box\";\r\n                    this._matrix = new jsidea.geom.Matrix2D();\r\n                }\r\n                Canvas.prototype.check = function (size) {\r\n                    return size.element && size.element instanceof HTMLCanvasElement;\r\n                };\r\n                Canvas.prototype.transform = function (invert, point, context) {\r\n                    if (!context)\r\n                        return;\r\n                    this._matrix.setData(context.getTransform());\r\n                    if (!this._matrix.isIdentity()) {\r\n                        if (invert)\r\n                            this._matrix.invert();\r\n                        var pt = this._matrix.transform(point);\r\n                        point.x = pt.x;\r\n                        point.y = pt.y;\r\n                    }\r\n                };\r\n                Canvas.prototype.fromBorderBox = function (size, point) {\r\n                    if (this.check(size)) {\r\n                        var element = size.element;\r\n                        point.x *= element.width / (element.clientWidth - (size.paddingLeft + size.paddingRight));\r\n                        point.y *= element.height / (element.clientHeight - (size.paddingTop + size.paddingBottom));\r\n                        point.x += size.paddingLeft + size.borderLeft;\r\n                        point.y += size.paddingTop + size.borderTop;\r\n                        if (element.hasContext() == \"2d\") {\r\n                            var ctx = element.getContext(\"2d\");\r\n                            this.transform(true, point, ctx);\r\n                        }\r\n                    }\r\n                };\r\n                Canvas.prototype.toBorderBox = function (size, point) {\r\n                    if (this.check(size)) {\r\n                        var element = size.element;\r\n                        point.x -= size.paddingLeft + size.borderLeft;\r\n                        point.y -= size.paddingTop + size.borderTop;\r\n                        point.x /= element.width / (element.clientWidth - (size.paddingLeft + size.paddingRight));\r\n                        point.y /= element.height / (element.clientHeight - (size.paddingTop + size.paddingBottom));\r\n                        if (element.hasContext() == \"2d\") {\r\n                            var ctx = element.getContext(\"2d\");\r\n                            this.transform(false, point, ctx);\r\n                        }\r\n                    }\r\n                };\r\n                Canvas.prototype.width = function (size) {\r\n                    return this.check(size) ? size.element.width : size.offsetWidth;\r\n                };\r\n                Canvas.prototype.height = function (size) {\r\n                    return this.check(size) ? size.element.height : size.offsetWidth;\r\n                };\r\n                return Canvas;\r\n            })();\r\n            BoxModel.CANVAS = new Canvas();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Clip.ts",
      "size": 1549,
      "sizeMinified": 691,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Clip = (function () {\r\n                function Clip() {\r\n                    this.name = \"clip-box\";\r\n                    this._clip = new jsidea.geom.Rect2D();\r\n                }\r\n                Clip.prototype.fromBorderBox = function (size, point) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(size.element, size.style, this._clip);\r\n                    point.x -= clip.x;\r\n                    point.y -= clip.y;\r\n                };\r\n                Clip.prototype.toBorderBox = function (size, point) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(size.element, size.style, this._clip);\r\n                    point.x += clip.x;\r\n                    point.y += clip.y;\r\n                };\r\n                Clip.prototype.width = function (size) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(size.element, size.style, this._clip);\r\n                    return clip.width;\r\n                };\r\n                Clip.prototype.height = function (size) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(size.element, size.style, this._clip);\r\n                    return clip.height;\r\n                };\r\n                return Clip;\r\n            })();\r\n            BoxModel.CLIP = new Clip();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Content.ts",
      "size": 1403,
      "sizeMinified": 652,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Content = (function () {\r\n                function Content() {\r\n                    this.name = \"content-box\";\r\n                }\r\n                Content.prototype.fromBorderBox = function (size, point) {\r\n                    point.x -= size.borderLeft + size.paddingLeft;\r\n                    point.y -= size.borderTop + size.paddingTop;\r\n                };\r\n                Content.prototype.toBorderBox = function (size, point) {\r\n                    point.x += size.borderLeft + size.paddingLeft;\r\n                    point.y += size.borderTop + size.paddingTop;\r\n                };\r\n                Content.prototype.width = function (size) {\r\n                    return size.offsetWidth - (size.borderLeft + size.borderRight + size.paddingLeft + size.paddingRight);\r\n                };\r\n                Content.prototype.height = function (size) {\r\n                    return size.offsetHeight - (size.borderTop + size.borderBottom + size.paddingTop + size.paddingBottom);\r\n                };\r\n                return Content;\r\n            })();\r\n            BoxModel.CONTENT = new Content();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Image.ts",
      "size": 2198,
      "sizeMinified": 993,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Image = (function () {\r\n                function Image() {\r\n                    this.name = \"image-box\";\r\n                }\r\n                Image.prototype.check = function (size) {\r\n                    return size.element && size.element instanceof HTMLImageElement;\r\n                };\r\n                Image.prototype.fromBorderBox = function (size, point) {\r\n                    if (this.check(size)) {\r\n                        var element = size.element;\r\n                        point.x *= element.width / (element.clientWidth - (size.paddingLeft + size.paddingRight));\r\n                        point.y *= element.height / (element.clientHeight - (size.paddingTop + size.paddingBottom));\r\n                        point.x += size.paddingLeft + size.borderLeft;\r\n                        point.y += size.paddingTop + size.borderTop;\r\n                    }\r\n                };\r\n                Image.prototype.toBorderBox = function (size, point) {\r\n                    if (this.check(size)) {\r\n                        var element = size.element;\r\n                        point.x -= size.paddingLeft + size.borderLeft;\r\n                        point.y -= size.paddingTop + size.borderTop;\r\n                        point.x /= element.width / (element.clientWidth - (size.paddingLeft + size.paddingRight));\r\n                        point.y /= element.height / (element.clientHeight - (size.paddingTop + size.paddingBottom));\r\n                    }\r\n                };\r\n                Image.prototype.width = function (size) {\r\n                    return this.check(size) ? size.element.width : size.offsetWidth;\r\n                };\r\n                Image.prototype.height = function (size) {\r\n                    return this.check(size) ? size.element.height : size.offsetWidth;\r\n                };\r\n                return Image;\r\n            })();\r\n            BoxModel.IMAGE = new Image();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Margin.ts",
      "size": 1237,
      "sizeMinified": 534,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Margin = (function () {\r\n                function Margin() {\r\n                    this.name = \"margin-box\";\r\n                }\r\n                Margin.prototype.fromBorderBox = function (size, point) {\r\n                    point.x += size.marginLeft;\r\n                    point.y += size.marginTop;\r\n                };\r\n                Margin.prototype.toBorderBox = function (size, point) {\r\n                    point.x -= size.marginLeft;\r\n                    point.y -= size.marginTop;\r\n                };\r\n                Margin.prototype.width = function (size) {\r\n                    return size.offsetWidth + size.marginLeft + size.marginRight;\r\n                };\r\n                Margin.prototype.height = function (size) {\r\n                    return size.offsetHeight + size.marginTop + size.marginBottom;\r\n                };\r\n                return Margin;\r\n            })();\r\n            BoxModel.MARGIN = new Margin();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/NormalDeviceCoordinates.ts",
      "size": 1643,
      "sizeMinified": 660,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var NormalDeviceCoordinates = (function () {\r\n                function NormalDeviceCoordinates() {\r\n                    this.name = \"normal-device-coordinates-box\";\r\n                }\r\n                NormalDeviceCoordinates.prototype.fromBorderBox = function (size, point) {\r\n                    point.x /= size.offsetWidth * 0.5;\r\n                    point.y /= size.offsetHeight * 0.5;\r\n                    point.x -= 1;\r\n                    point.y -= 1;\r\n                };\r\n                NormalDeviceCoordinates.prototype.toBorderBox = function (size, point) {\r\n                    point.x += 1;\r\n                    point.y += 1;\r\n                    point.x *= size.offsetWidth * 0.5;\r\n                    point.y *= size.offsetHeight * 0.5;\r\n                };\r\n                NormalDeviceCoordinates.prototype.width = function (size) {\r\n                    return size.offsetWidth - (size.borderLeft + size.borderRight + size.paddingLeft + size.paddingRight);\r\n                };\r\n                NormalDeviceCoordinates.prototype.height = function (size) {\r\n                    return size.offsetHeight - (size.borderTop + size.borderBottom + size.paddingTop + size.paddingBottom);\r\n                };\r\n                return NormalDeviceCoordinates;\r\n            })();\r\n            BoxModel.NDC = new NormalDeviceCoordinates();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Padding.ts",
      "size": 1251,
      "sizeMinified": 540,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Padding = (function () {\r\n                function Padding() {\r\n                    this.name = \"padding-box\";\r\n                }\r\n                Padding.prototype.fromBorderBox = function (size, point) {\r\n                    point.x -= size.borderLeft;\r\n                    point.y -= size.borderTop;\r\n                };\r\n                Padding.prototype.toBorderBox = function (size, point) {\r\n                    point.x += size.borderLeft;\r\n                    point.y += size.borderTop;\r\n                };\r\n                Padding.prototype.width = function (size) {\r\n                    return size.offsetWidth - (size.borderLeft + size.borderRight);\r\n                };\r\n                Padding.prototype.height = function (size) {\r\n                    return size.offsetHeight - (size.borderTop + size.borderBottom);\r\n                };\r\n                return Padding;\r\n            })();\r\n            BoxModel.PADDING = new Padding();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/BoxModel/Scroll.ts",
      "size": 1661,
      "sizeMinified": 663,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var BoxModel;\r\n        (function (BoxModel) {\r\n            var Scroll = (function () {\r\n                function Scroll() {\r\n                    this.name = \"scroll-box\";\r\n                }\r\n                Scroll.prototype.getScroll = function (size) {\r\n                    var scrollLeft = size.scrollLeft;\r\n                    var scrollTop = size.scrollTop;\r\n                    return new jsidea.geom.Point2D(scrollLeft, scrollTop);\r\n                };\r\n                Scroll.prototype.fromBorderBox = function (size, point) {\r\n                    var scroll = this.getScroll(size);\r\n                    BoxModel.PADDING.toBorderBox(size, point);\r\n                    point.x += scroll.x;\r\n                    point.y += scroll.y;\r\n                };\r\n                Scroll.prototype.toBorderBox = function (size, point) {\r\n                    var scroll = this.getScroll(size);\r\n                    BoxModel.PADDING.toBorderBox(size, point);\r\n                    point.x -= scroll.x;\r\n                    point.y -= scroll.y;\r\n                };\r\n                Scroll.prototype.width = function (size) {\r\n                    return size.element.scrollWidth;\r\n                };\r\n                Scroll.prototype.height = function (size) {\r\n                    return size.element.scrollHeight;\r\n                };\r\n                return Scroll;\r\n            })();\r\n            BoxModel.SCROLL = new Scroll();\r\n        })(BoxModel = layout.BoxModel || (layout.BoxModel = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/IBoxModel.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/IMoveLimits.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/IMoveMode.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/IPositionFrom.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/IPositionTo.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/ISnapGrid.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/ISnapMode.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/ISnapTo.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/IStyleNode.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/ITransformMode.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/layout/Move.ts",
      "size": 1926,
      "sizeMinified": 792,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var Move = (function () {\r\n            function Move() {\r\n                this.position = new jsidea.geom.Point3D();\r\n                this.limits = {};\r\n                this.mode = null;\r\n            }\r\n            Move.create = function () {\r\n                return new Move();\r\n            };\r\n            Move.prototype.clone = function () {\r\n                return (new Move()).copyFrom(this);\r\n            };\r\n            Move.prototype.copyFrom = function (move) {\r\n                this.position.copyFrom(move.position);\r\n                this.limits = move.limits;\r\n                this.mode = move.mode;\r\n                return this;\r\n            };\r\n            Move.apply = function (options, transform) {\r\n                if (!transform)\r\n                    return;\r\n                options = options || Move.DEFAULT;\r\n                var mode = options.mode || layout.MoveMode.TRANSFORM;\r\n                var point = options.position.clone();\r\n                var style = transform.size.style;\r\n                var size = transform.size;\r\n                var element = transform.element;\r\n                mode.transform(point, element, style);\r\n                var toBox = options.limits.boxModel || layout.BoxModel.BORDER;\r\n                var bounds = size.bounds(toBox);\r\n                jsidea.math.Number.limits(point, options.limits, bounds.width, bounds.height);\r\n                mode.clamp(point, element, style);\r\n                mode.apply(point, element, style);\r\n            };\r\n            Move.prototype.dispose = function () {\r\n                this.limits = null;\r\n                this.mode = null;\r\n            };\r\n            Move.DEFAULT = new Move();\r\n            return Move;\r\n        })();\r\n        layout.Move = Move;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/Background.ts",
      "size": 1503,
      "sizeMinified": 667,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var Background = (function () {\r\n                function Background() {\r\n                    this.boxModel = layout.BoxModel.BACKGROUND;\r\n                    this.willChange = \"contents\";\r\n                    this.invertX = false;\r\n                    this.invertY = false;\r\n                    this._rect = new jsidea.geom.Rect2D();\r\n                    this._size = layout.Box.create();\r\n                }\r\n                Background.prototype.transform = function (offset, element, style) {\r\n                    var rect = this._rect;\r\n                    this._size.update(element, style);\r\n                    this._size.bounds(layout.BoxModel.BACKGROUND, layout.BoxModel.PADDING, rect);\r\n                    return offset.translate(rect.x, rect.y, 0);\r\n                };\r\n                Background.prototype.apply = function (point, element, style) {\r\n                    element.style.backgroundPosition = Math.round(point.x) + \"px \" + Math.round(point.y) + \"px\";\r\n                };\r\n                Background.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return Background;\r\n            })();\r\n            MoveMode.BACKGROUND = new Background();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/BorderBottomRightInner.ts",
      "size": 3460,
      "sizeMinified": 1380,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var BorderBottomRightInner = (function () {\r\n                function BorderBottomRightInner() {\r\n                    this.boxModel = layout.BoxModel.BORDER;\r\n                    this.willChange = \"contents\";\r\n                    this._size = layout.Box.create();\r\n                }\r\n                BorderBottomRightInner.prototype.transform = function (offset, element, style) {\r\n                    var bs = this._size;\r\n                    bs.update(element, style);\r\n                    if (style.boxSizing == \"border-box\" || (style.right != \"auto\" && style.right != \"auto\")) {\r\n                        offset.x *= -1;\r\n                        offset.x += bs.borderRight;\r\n                    }\r\n                    else {\r\n                        offset.x = bs.borderRight;\r\n                    }\r\n                    if (style.boxSizing == \"border-box\" || (style.top != \"auto\" && style.bottom != \"auto\")) {\r\n                        offset.y *= -1;\r\n                        offset.y += bs.borderBottom;\r\n                    }\r\n                    else {\r\n                        offset.y = bs.borderBottom;\r\n                    }\r\n                    return offset;\r\n                };\r\n                BorderBottomRightInner.prototype.apply = function (point, element, style) {\r\n                    this._size.update(element, style);\r\n                    var right = isNaN(point.x) ? this._size.borderRight : Math.round(point.x);\r\n                    var bottom = isNaN(point.y) ? this._size.borderBottom : Math.round(point.y);\r\n                    element.style.borderWidth = this._size.borderTop + \"px \" + right + \"px \" + bottom + \"px \" + this._size.borderLeft + \"px\";\r\n                };\r\n                BorderBottomRightInner.prototype.clamp = function (point, element, style) {\r\n                    var bs = this._size;\r\n                    bs.update(element, style);\r\n                    if (style.boxSizing == \"border-box\" || (style.left != \"auto\" && style.right != \"auto\")) {\r\n                        point.x = Math.max(point.x, 0);\r\n                        var minWidth = jsidea.math.Number.parse(style.minWidth, 0);\r\n                        var maxX = bs.offsetWidth - (bs.borderLeft + bs.paddingLeft + bs.paddingRight) - minWidth;\r\n                        point.x = Math.min(maxX, point.x);\r\n                    }\r\n                    else {\r\n                        point.x = bs.borderRight;\r\n                    }\r\n                    if (style.boxSizing == \"border-box\" || (style.top != \"auto\" && style.bottom != \"auto\")) {\r\n                        point.y = Math.max(point.y, 0);\r\n                        var minHeight = jsidea.math.Number.parse(style.minHeight, 0);\r\n                        var maxY = bs.offsetHeight - (bs.borderTop + bs.paddingTop + bs.paddingBottom) - minHeight;\r\n                        point.y = Math.min(maxY, point.y);\r\n                    }\r\n                    else {\r\n                        point.y = bs.borderBottom;\r\n                    }\r\n                };\r\n                return BorderBottomRightInner;\r\n            })();\r\n            MoveMode.BORDER_BOTTOM_RIGHT_INNER = new BorderBottomRightInner();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/BorderBottomRightOuter.ts",
      "size": 2120,
      "sizeMinified": 878,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var BorderBottomRightOuter = (function () {\r\n                function BorderBottomRightOuter() {\r\n                    this.willChange = \"contents\";\r\n                    this._size = layout.Box.create();\r\n                }\r\n                BorderBottomRightOuter.prototype.transform = function (offset, element, style) {\r\n                    var bs = this._size;\r\n                    bs.update(element, style);\r\n                    if (style.boxSizing == \"border-box\" || (style.left != \"auto\" && style.right != \"auto\"))\r\n                        offset.x = bs.borderRight;\r\n                    else\r\n                        offset.x += bs.borderRight;\r\n                    if (style.boxSizing == \"border-box\" || (style.top != \"auto\" && style.bottom != \"auto\"))\r\n                        offset.y = bs.borderBottom;\r\n                    else\r\n                        offset.y += bs.borderBottom;\r\n                    return offset;\r\n                };\r\n                BorderBottomRightOuter.prototype.apply = function (point, element, style) {\r\n                    this._size.update(element, style);\r\n                    var right = isNaN(point.x) ? this._size.borderRight : Math.round(point.x);\r\n                    var bottom = isNaN(point.y) ? this._size.borderBottom : Math.round(point.y);\r\n                    element.style.borderWidth = this._size.borderTop + \"px \" + right + \"px \" + bottom + \"px \" + this._size.borderLeft + \"px\";\r\n                };\r\n                BorderBottomRightOuter.prototype.clamp = function (point, element, style) {\r\n                    point.x = Math.max(point.x, 0);\r\n                    point.y = Math.max(point.y, 0);\r\n                };\r\n                return BorderBottomRightOuter;\r\n            })();\r\n            MoveMode.BORDER_BOTTOM_RIGHT_OUTER = new BorderBottomRightOuter();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/BorderTopLeft.ts",
      "size": 1626,
      "sizeMinified": 767,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var BorderTopLeft = (function () {\r\n                function BorderTopLeft() {\r\n                    this.willChange = \"contents\";\r\n                    this._boxSizing = layout.Box.create();\r\n                }\r\n                BorderTopLeft.prototype.transform = function (offset, element, style) {\r\n                    this._boxSizing.update(element, style);\r\n                    return offset.translate(this._boxSizing.borderLeft, this._boxSizing.borderTop, 0);\r\n                };\r\n                BorderTopLeft.prototype.apply = function (point, element, style) {\r\n                    this._boxSizing.update(element, style);\r\n                    var left = isNaN(point.x) ? this._boxSizing.borderLeft : Math.round(point.x);\r\n                    var top = isNaN(point.y) ? this._boxSizing.borderTop : Math.round(point.y);\r\n                    element.style.borderWidth = top + \"px \" + this._boxSizing.borderRight + \"px \" + this._boxSizing.borderBottom + \"px \" + left + \"px\";\r\n                };\r\n                BorderTopLeft.prototype.clamp = function (point, element, style) {\r\n                    point.x = Math.max(point.x, 0);\r\n                    point.y = Math.max(point.y, 0);\r\n                };\r\n                return BorderTopLeft;\r\n            })();\r\n            MoveMode.BORDER_TOP_LEFT = new BorderTopLeft();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/BottomLeft.ts",
      "size": 1653,
      "sizeMinified": 700,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var BottomLeft = (function () {\r\n                function BottomLeft() {\r\n                    this.willChange = \"bottom, left\";\r\n                    this.invertX = false;\r\n                    this.invertY = true;\r\n                }\r\n                BottomLeft.prototype.transform = function (offset, element, style) {\r\n                    var bottom = MoveMode.BOTTOM_RIGHT.transform(offset.clone(), element, style);\r\n                    var left = MoveMode.TOP_LEFT.transform(offset.clone(), element, style);\r\n                    return offset.setTo(left.x, bottom.y, offset.z);\r\n                };\r\n                BottomLeft.prototype.apply = function (point, element, style) {\r\n                    if (style.position === \"static\") {\r\n                        console.warn(\"You cannot apply BottomLeftMode to an static element.\");\r\n                        return;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.style.left = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.bottom = Math.round(point.y) + \"px\";\r\n                };\r\n                BottomLeft.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return BottomLeft;\r\n            })();\r\n            MoveMode.BOTTOM_LEFT = new BottomLeft();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/BottomRight.ts",
      "size": 4733,
      "sizeMinified": 1539,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var BottomRight = (function () {\r\n                function BottomRight() {\r\n                    this.willChange = \"bottom, right\";\r\n                    this.invertX = true;\r\n                    this.invertY = true;\r\n                    this._size = layout.Box.create();\r\n                }\r\n                BottomRight.prototype.transform = function (offset, element, style) {\r\n                    var offsetX = offset.x;\r\n                    var offsetY = offset.y;\r\n                    var rightAuto = style.right == \"auto\";\r\n                    var bottomAuto = style.bottom == \"auto\";\r\n                    if (rightAuto || bottomAuto) {\r\n                        MoveMode.TOP_LEFT.transform(offset, element, style);\r\n                        var parentWidth = 0;\r\n                        var parentHeight = 0;\r\n                        if (element.parentElement) {\r\n                            parentWidth = element.parentElement.clientWidth;\r\n                            parentHeight = element.parentElement.clientHeight;\r\n                        }\r\n                        if (style.position == \"fixed\") {\r\n                            var node = layout.StyleNode.create(element);\r\n                            if (node.isSticked) {\r\n                                var body = element.ownerDocument.body;\r\n                                parentWidth = body.clientWidth;\r\n                                parentHeight = body.clientHeight;\r\n                            }\r\n                            this._size.update(element);\r\n                            offset.x += this._size.marginLeft;\r\n                            offset.y += this._size.marginTop;\r\n                            offset.x += this._size.marginRight;\r\n                            offset.y += this._size.marginBottom;\r\n                            offset.x += element.offsetWidth;\r\n                            offset.y += element.offsetHeight;\r\n                            offset.x = parentWidth - offset.x;\r\n                            offset.y = parentHeight - offset.y;\r\n                        }\r\n                        else if (style.position == \"relative\") {\r\n                            offset.x = -offset.x;\r\n                            offset.y = -offset.y;\r\n                            return offset;\r\n                        }\r\n                        else {\r\n                            offset.x += element.offsetWidth;\r\n                            offset.y += element.offsetHeight;\r\n                            offset.x = parentWidth - offset.x;\r\n                            offset.y = parentHeight - offset.y;\r\n                        }\r\n                    }\r\n                    else {\r\n                        offset.setTo(jsidea.math.Number.parse(style.right, 0) - offset.x, jsidea.math.Number.parse(style.bottom, 0) - offset.y, offset.z);\r\n                    }\r\n                    var leftAuto = style.left == \"auto\";\r\n                    var minWidth = jsidea.math.Number.parse(style.minWidth, 0);\r\n                    if (!leftAuto) {\r\n                        var newWidth = element.clientWidth + offsetX;\r\n                        if (newWidth < minWidth)\r\n                            offset.x += newWidth - minWidth;\r\n                    }\r\n                    var topAuto = style.top == \"auto\";\r\n                    var minHeight = jsidea.math.Number.parse(style.minHeight, 0);\r\n                    if (!topAuto) {\r\n                        var newHeight = element.clientHeight + offsetY;\r\n                        if (newHeight < minHeight)\r\n                            offset.y += newHeight - minHeight;\r\n                    }\r\n                    return offset;\r\n                };\r\n                BottomRight.prototype.apply = function (point, element, style) {\r\n                    if (style.position === \"static\") {\r\n                        console.warn(\"You cannot apply BottomRightMode to an static element.\");\r\n                        return;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.style.right = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.bottom = Math.round(point.y) + \"px\";\r\n                };\r\n                BottomRight.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return BottomRight;\r\n            })();\r\n            MoveMode.BOTTOM_RIGHT = new BottomRight();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/Clip.ts",
      "size": 1605,
      "sizeMinified": 717,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var Clip = (function () {\r\n                function Clip() {\r\n                    this.boxModel = layout.BoxModel.CLIP;\r\n                    this.willChange = \"contents\";\r\n                    this._clip = new jsidea.geom.Rect2D();\r\n                }\r\n                Clip.prototype.transform = function (offset, element, style) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(element, style, this._clip);\r\n                    return offset.translate(clip.x, clip.y, 0);\r\n                };\r\n                Clip.prototype.apply = function (point, element, style) {\r\n                    if (style.position != \"absolute\" && style.position != \"fixed\")\r\n                        return console.warn(\"You cannot apply clipping to an \" + style.position + \"-positioned element\");\r\n                    var clip = jsidea.geom.Rect2D.getClip(element, style, this._clip);\r\n                    if (!isNaN(point.x))\r\n                        clip.x = point.x;\r\n                    if (!isNaN(point.y))\r\n                        clip.y = point.y;\r\n                    element.style.clip = clip.getCSS();\r\n                };\r\n                Clip.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return Clip;\r\n            })();\r\n            MoveMode.CLIP = new Clip();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/ClipBottomRight.ts",
      "size": 1796,
      "sizeMinified": 771,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var ClipBottomRight = (function () {\r\n                function ClipBottomRight() {\r\n                    this.boxModel = layout.BoxModel.CLIP;\r\n                    this.willChange = \"contents\";\r\n                    this._clip = new jsidea.geom.Rect2D();\r\n                }\r\n                ClipBottomRight.prototype.transform = function (offset, element, style) {\r\n                    var clip = jsidea.geom.Rect2D.getClip(element, style, this._clip);\r\n                    offset.translate(clip.right, clip.bottom, 0);\r\n                    console.log(offset.x, offset.y);\r\n                    return offset;\r\n                };\r\n                ClipBottomRight.prototype.apply = function (point, element, style) {\r\n                    if (style.position != \"absolute\" && style.position != \"fixed\")\r\n                        return console.warn(\"You cannot apply clipping to an \" + style.position + \"-positioned element\");\r\n                    var clip = jsidea.geom.Rect2D.getClip(element, style, this._clip);\r\n                    if (!isNaN(point.x))\r\n                        clip.right = point.x;\r\n                    if (!isNaN(point.y))\r\n                        clip.bottom = point.y;\r\n                    element.style.clip = clip.getCSS();\r\n                };\r\n                ClipBottomRight.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return ClipBottomRight;\r\n            })();\r\n            MoveMode.CLIP_BOTTOM_RIGHT = new ClipBottomRight();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/MarginBottomRight.ts",
      "size": 1732,
      "sizeMinified": 664,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var MarginBottomRight = (function () {\r\n                function MarginBottomRight() {\r\n                    this.willChange = \"auto\";\r\n                    this.invertX = true;\r\n                    this.invertY = true;\r\n                }\r\n                MarginBottomRight.prototype.transform = function (offset, element, style) {\r\n                    var rightAuto = style.marginRight == \"auto\";\r\n                    var bottomAuto = style.marginBottom == \"auto\";\r\n                    offset.x *= -1;\r\n                    offset.y *= -1;\r\n                    if (rightAuto || bottomAuto) {\r\n                    }\r\n                    else\r\n                        offset.translate(jsidea.math.Number.parse(style.marginRight, 0), jsidea.math.Number.parse(style.marginBottom, 0), 0);\r\n                    return offset;\r\n                };\r\n                MarginBottomRight.prototype.apply = function (point, element, style) {\r\n                    if (!isNaN(point.x))\r\n                        element.style.marginRight = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.marginBottom = Math.round(point.y) + \"px\";\r\n                };\r\n                MarginBottomRight.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return MarginBottomRight;\r\n            })();\r\n            MoveMode.MARGIN_BOTTOM_RIGHT = new MarginBottomRight();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/MarginTopLeft.ts",
      "size": 1522,
      "sizeMinified": 600,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var MarginTopLeft = (function () {\r\n                function MarginTopLeft() {\r\n                    this.willChange = \"auto\";\r\n                }\r\n                MarginTopLeft.prototype.transform = function (offset, element, style) {\r\n                    var leftAuto = style.marginLeft == \"auto\";\r\n                    var topAuto = style.marginTop == \"auto\";\r\n                    if (leftAuto || topAuto) {\r\n                    }\r\n                    else\r\n                        offset.translate(jsidea.math.Number.parse(style.marginLeft, 0), jsidea.math.Number.parse(style.marginTop, 0), 0);\r\n                    return offset;\r\n                };\r\n                MarginTopLeft.prototype.apply = function (point, element, style) {\r\n                    if (!isNaN(point.x))\r\n                        element.style.marginLeft = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.marginTop = Math.round(point.y) + \"px\";\r\n                };\r\n                MarginTopLeft.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return MarginTopLeft;\r\n            })();\r\n            MoveMode.MARGIN_TOP_LEFT = new MarginTopLeft();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/Scroll.ts",
      "size": 1977,
      "sizeMinified": 783,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var Scroll = (function () {\r\n                function Scroll() {\r\n                    this.boxModel = layout.BoxModel.SCROLL;\r\n                    this.willChange = \"scroll-position\";\r\n                }\r\n                Scroll.prototype.transform = function (offset, element, style) {\r\n                    var scrollLeft = element.scrollLeft;\r\n                    var scrollTop = element.scrollTop;\r\n                    if (!jsidea.system.Engine.isWebKit && element.ownerDocument.body == element) {\r\n                        scrollLeft = element.ownerDocument.documentElement.scrollLeft;\r\n                        scrollTop = element.ownerDocument.documentElement.scrollTop;\r\n                    }\r\n                    offset.x *= -1;\r\n                    offset.y *= -1;\r\n                    offset.translate(scrollLeft, scrollTop, 0);\r\n                    return offset;\r\n                };\r\n                Scroll.prototype.apply = function (point, element, style) {\r\n                    if (!jsidea.system.Engine.isWebKit && element == element.ownerDocument.body) {\r\n                        element = element.ownerDocument.documentElement;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.scrollLeft = point.x;\r\n                    if (!isNaN(point.y))\r\n                        element.scrollTop = point.y;\r\n                };\r\n                Scroll.prototype.clamp = function (point, element, style) {\r\n                    point.x = Math.max(point.x, 0);\r\n                    point.y = Math.max(point.y, 0);\r\n                };\r\n                return Scroll;\r\n            })();\r\n            MoveMode.SCROLL = new Scroll();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/TopLeft.ts",
      "size": 6302,
      "sizeMinified": 2582,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var TopLeft = (function () {\r\n                function TopLeft() {\r\n                    this.willChange = \"top, left\";\r\n                    this._sizeParent = layout.Box.create();\r\n                    this._size = layout.Box.create();\r\n                }\r\n                TopLeft.prototype.transform = function (offset, element, style) {\r\n                    //!IMPORTANT: style needs to be an computed style not the element's style-property\r\n                    var leftAuto = style.left == \"auto\";\r\n                    var topAuto = style.top == \"auto\";\r\n                    if (leftAuto || topAuto) {\r\n                        if (jsidea.system.Engine.isWebKit) {\r\n                            var node = layout.StyleNode.create(element);\r\n                            var position = new jsidea.geom.Point3D();\r\n                            if (node.isRelative) {\r\n                                this._size.update(node.element, node.style);\r\n                                this._sizeParent.update(node.parent.element, node.parent.style);\r\n                                position.x = node.position.x - node.parent.clientLeft;\r\n                                position.y = node.position.y - node.parent.clientTop;\r\n                                position.x -= this._sizeParent.paddingLeft;\r\n                                position.y -= this._sizeParent.paddingTop;\r\n                                position.x -= this._size.marginLeft;\r\n                                position.y -= this._size.marginTop;\r\n                            }\r\n                            else if (node.isSticked) {\r\n                                position.x = node.offset.x;\r\n                                position.y = node.offset.y;\r\n                                this._size.update(node.element, node.style);\r\n                                position.x -= element.ownerDocument.body.scrollLeft + this._size.marginLeft;\r\n                                position.y -= element.ownerDocument.body.scrollTop + this._size.marginTop;\r\n                            }\r\n                            else if (node.isAbsolute) {\r\n                                var par = node.offsetParent ? node.offsetParent : node.first;\r\n                                position.x = node.offset.x - par.offset.x;\r\n                                position.y = node.offset.y - par.offset.y;\r\n                                position.x -= node.parent.clientLeft;\r\n                                position.y -= node.parent.clientTop;\r\n                            }\r\n                            else {\r\n                                this._size.update(node.element, node.style);\r\n                                this._sizeParent.update(node.parent.element, node.parent.style);\r\n                                position.x = node.position.x + this._sizeParent.paddingLeft - this._size.marginLeft;\r\n                                position.y = node.position.y + this._sizeParent.paddingTop - this._size.marginTop;\r\n                                this._sizeParent.transform(position, layout.BoxModel.BORDER, layout.BoxModel.CONTENT);\r\n                            }\r\n                            return offset.translate(position.x, position.y, 0);\r\n                        }\r\n                        else if (jsidea.system.Browser.isInternetExplorer) {\r\n                            this._size.update(element, style);\r\n                            var dx = element.offsetLeft;\r\n                            var dy = element.offsetTop;\r\n                            if (style.position == \"relative\") {\r\n                                this._sizeParent.update(element.parentElement);\r\n                                if (element.parentElement == element.ownerDocument.body) {\r\n                                    dx -= this._size.marginLeft + this._sizeParent.borderLeft;\r\n                                    dy -= this._size.marginTop + this._sizeParent.borderRight;\r\n                                }\r\n                                else {\r\n                                    dx -= this._size.marginLeft + this._sizeParent.paddingLeft;\r\n                                    dy -= this._size.marginTop + this._sizeParent.paddingTop;\r\n                                }\r\n                            }\r\n                            else if (style.position == \"fixed\") {\r\n                                this._sizeParent.update(element.ownerDocument.body);\r\n                                dx -= this._size.marginLeft + this._sizeParent.paddingLeft;\r\n                                dy -= this._size.marginTop + this._sizeParent.paddingTop;\r\n                            }\r\n                            else if (style.position == \"absolute\") {\r\n                                dx -= this._size.marginLeft;\r\n                                dy -= this._size.marginTop;\r\n                            }\r\n                            return offset.translate(jsidea.math.Number.parse(style.left, dx), jsidea.math.Number.parse(style.top, dy), 0);\r\n                        }\r\n                        else if (jsidea.system.Browser.isFirefox) {\r\n                        }\r\n                    }\r\n                    return offset.translate(jsidea.math.Number.parse(style.left, 0), jsidea.math.Number.parse(style.top, 0), 0);\r\n                };\r\n                TopLeft.prototype.apply = function (point, element, style) {\r\n                    if (style.position === \"static\") {\r\n                        console.warn(\"You cannot apply TopLeftMode to an static element.\");\r\n                        return;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.style.left = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.top = Math.round(point.y) + \"px\";\r\n                };\r\n                TopLeft.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return TopLeft;\r\n            })();\r\n            MoveMode.TOP_LEFT = new TopLeft();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/TopLeftClamped.ts",
      "size": 2320,
      "sizeMinified": 821,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var TopLeftClamped = (function () {\r\n                function TopLeftClamped() {\r\n                    this.willChange = \"top, left\";\r\n                }\r\n                TopLeftClamped.prototype.transform = function (offset, element, style) {\r\n                    var offsetX = offset.x;\r\n                    var offsetY = offset.y;\r\n                    MoveMode.TOP_LEFT.transform(offset, element, style);\r\n                    var rightAuto = style.right == \"auto\";\r\n                    var minWidth = jsidea.math.Number.parse(style.minWidth, 0);\r\n                    if (!rightAuto) {\r\n                        var newWidth = element.clientWidth - offsetX;\r\n                        if (newWidth < minWidth)\r\n                            offset.x += newWidth - minWidth;\r\n                    }\r\n                    var bottomAuto = style.bottom == \"auto\";\r\n                    var minHeight = jsidea.math.Number.parse(style.minHeight, 0);\r\n                    if (!bottomAuto) {\r\n                        var newHeight = element.clientHeight - offsetY;\r\n                        if (newHeight < minHeight)\r\n                            offset.y += newHeight - minHeight;\r\n                    }\r\n                    return offset;\r\n                };\r\n                TopLeftClamped.prototype.apply = function (point, element, style) {\r\n                    if (style.position === \"static\") {\r\n                        console.warn(\"You cannot apply TopLeftModeClamped to an static element.\");\r\n                        return;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.style.left = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.top = Math.round(point.y) + \"px\";\r\n                };\r\n                TopLeftClamped.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return TopLeftClamped;\r\n            })();\r\n            MoveMode.TOP_LEFT_CLAMPED = new TopLeftClamped();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/TopRight.ts",
      "size": 1627,
      "sizeMinified": 692,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var TopRight = (function () {\r\n                function TopRight() {\r\n                    this.willChange = \"top, right\";\r\n                    this.invertX = true;\r\n                    this.invertY = false;\r\n                }\r\n                TopRight.prototype.transform = function (offset, element, style) {\r\n                    var top = MoveMode.TOP_LEFT.transform(offset.clone(), element, style);\r\n                    var right = MoveMode.BOTTOM_RIGHT.transform(offset.clone(), element, style);\r\n                    return offset.setTo(right.x, top.y, offset.z);\r\n                };\r\n                TopRight.prototype.apply = function (point, element, style) {\r\n                    if (style.position === \"static\") {\r\n                        console.warn(\"You cannot apply TopRightMode to an static element.\");\r\n                        return;\r\n                    }\r\n                    if (!isNaN(point.x))\r\n                        element.style.right = Math.round(point.x) + \"px\";\r\n                    if (!isNaN(point.y))\r\n                        element.style.top = Math.round(point.y) + \"px\";\r\n                };\r\n                TopRight.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return TopRight;\r\n            })();\r\n            MoveMode.TOP_RIGHT = new TopRight();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/MoveMode/Transform.ts",
      "size": 1516,
      "sizeMinified": 607,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var MoveMode;\r\n        (function (MoveMode) {\r\n            var Transform = (function () {\r\n                function Transform() {\r\n                    this.willChange = \"transform\";\r\n                    this._matrix = new jsidea.geom.Matrix3D();\r\n                }\r\n                Transform.prototype.transform = function (offset, element, style) {\r\n                    return offset;\r\n                };\r\n                Transform.prototype.apply = function (point, element, style) {\r\n                    var matrix = jsidea.geom.Matrix3D.create(element, style, this._matrix);\r\n                    if (!isNaN(point.x))\r\n                        matrix.m41 = point.x;\r\n                    if (!isNaN(point.y))\r\n                        matrix.m42 = point.y;\r\n                    if (!isNaN(point.z))\r\n                        matrix.m43 = point.z;\r\n                    if (jsidea.system.Engine.isWebKit)\r\n                        matrix.m43 *= 1 / (window.innerWidth / window.outerWidth);\r\n                    element.style.transform = matrix.getCSS();\r\n                };\r\n                Transform.prototype.clamp = function (point, element, style) {\r\n                };\r\n                return Transform;\r\n            })();\r\n            MoveMode.TRANSFORM = new Transform();\r\n        })(MoveMode = layout.MoveMode || (layout.MoveMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/Position.ts",
      "size": 4354,
      "sizeMinified": 1915,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var Position = (function () {\r\n            function Position() {\r\n                this.to = {};\r\n                this.from = {};\r\n                this.snap = null;\r\n                this.move = new layout.Move();\r\n            }\r\n            Position.create = function () {\r\n                return new Position();\r\n            };\r\n            Position.prototype.clone = function () {\r\n                return (new Position()).copyFrom(this);\r\n            };\r\n            Position.prototype.copyFrom = function (position) {\r\n                this.to = position.to;\r\n                this.from = position.from;\r\n                this.move = position.move;\r\n                return this;\r\n            };\r\n            Position.apply = function (position, element) {\r\n                if (!element)\r\n                    return null;\r\n                var transform = layout.Transform.create(element);\r\n                Position.calc(position, transform, position.move.position);\r\n                layout.Move.apply(position.move, transform);\r\n                if (position.snap) {\r\n                    position.snap.move.mode = position.move.mode;\r\n                    layout.Snap.apply(position.snap, element);\r\n                }\r\n            };\r\n            Position.calcByElement = function (position, element) {\r\n                return Position.calc(position, layout.Transform.create(element));\r\n            };\r\n            Position.calc = function (position, transform, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                if (!transform)\r\n                    return ret;\r\n                var fromElement = position.from.element || transform.element.ownerDocument.documentElement;\r\n                Position._from.update(fromElement);\r\n                var toBox = position.to.boxModel || layout.BoxModel.BORDER;\r\n                var fromBox = position.from.boxModel || layout.BoxModel.BORDER;\r\n                var sizeTo = transform.size.bounds(toBox);\r\n                var toX = jsidea.math.Number.relation(position.to.x, sizeTo.width, 0) + jsidea.math.Number.relation(position.to.offsetX, sizeTo.width, 0);\r\n                var toY = jsidea.math.Number.relation(position.to.y, sizeTo.height, 0) + jsidea.math.Number.relation(position.to.offsetY, sizeTo.height, 0);\r\n                var sizeFrom = Position._from.size.bounds(fromBox);\r\n                var fromX = jsidea.math.Number.relation(position.from.x, sizeFrom.width, 0) + jsidea.math.Number.relation(position.from.offsetX, sizeFrom.width, 0);\r\n                var fromY = jsidea.math.Number.relation(position.from.y, sizeFrom.height, 0) + jsidea.math.Number.relation(position.from.offsetY, sizeFrom.height, 0);\r\n                if (position.from.minX !== undefined)\r\n                    fromX = Math.max(fromX, jsidea.math.Number.relation(position.from.minX, sizeFrom.width, fromX));\r\n                if (position.from.maxX !== undefined)\r\n                    fromX = Math.min(fromX, jsidea.math.Number.relation(position.from.maxX, sizeFrom.width, fromX));\r\n                if (position.from.minY !== undefined)\r\n                    fromY = Math.max(fromY, jsidea.math.Number.relation(position.from.minY, sizeFrom.height, fromY));\r\n                if (position.from.maxY !== undefined)\r\n                    fromY = Math.min(fromY, jsidea.math.Number.relation(position.from.maxY, sizeFrom.height, fromY));\r\n                var lc = Position._from.localToLocal(transform, fromX, fromY, 0, fromBox, toBox);\r\n                lc.x -= toX;\r\n                lc.y -= toY;\r\n                lc.z = 0;\r\n                var matrix = new jsidea.geom.Matrix3D();\r\n                matrix.appendPositionRaw(lc.x, lc.y, 0);\r\n                matrix.append(transform.matrix);\r\n                return matrix.getPosition(ret);\r\n            };\r\n            Position.prototype.dispose = function () {\r\n                this.to = null;\r\n                this.from = null;\r\n                this.move = null;\r\n            };\r\n            Position._from = new layout.Transform();\r\n            Position._bounds = new layout.Transform();\r\n            return Position;\r\n        })();\r\n        layout.Position = Position;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/Snap.ts",
      "size": 2514,
      "sizeMinified": 1098,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var Snap = (function () {\r\n            function Snap() {\r\n                this.mode = null;\r\n                this.to = {};\r\n                this.grid = {};\r\n                this.move = new layout.Move();\r\n            }\r\n            Snap.apply = function (snap, element) {\r\n                var transform = layout.Transform.create(element);\r\n                Snap.calc(snap, transform, snap.move.position);\r\n                layout.Move.apply(snap.move, transform);\r\n            };\r\n            Snap.calcByElement = function (snap, element, ret) {\r\n                return Snap.calc(snap, layout.Transform.create(element), ret);\r\n            };\r\n            Snap.calc = function (snap, transform, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                if (!transform)\r\n                    return;\r\n                snap = snap || Snap.DEFAULT;\r\n                var toBox = snap.to.boxModel || layout.BoxModel.BORDER;\r\n                var gridBox = snap.grid.boxModel || layout.BoxModel.BORDER;\r\n                var gridElement = snap.grid.element || transform.element.ownerDocument.documentElement;\r\n                var grid = Snap._grid.update(gridElement);\r\n                var mode = snap.mode || layout.SnapMode.BASIC;\r\n                var sizeTo = transform.size.bounds(toBox);\r\n                var toX = jsidea.math.Number.relation(snap.to.x, sizeTo.width, 0) + jsidea.math.Number.relation(snap.to.offsetX, sizeTo.width, 0);\r\n                var toY = jsidea.math.Number.relation(snap.to.y, sizeTo.height, 0) + jsidea.math.Number.relation(snap.to.offsetY, sizeTo.height, 0);\r\n                var off = new jsidea.geom.Point3D(toX, toY);\r\n                var point = transform.localToLocalPoint(grid, off, toBox, gridBox);\r\n                mode.transform(snap, transform, point);\r\n                var lc = grid.localToLocalPoint(transform, point, gridBox, toBox);\r\n                lc.sub(off);\r\n                lc.z = 0;\r\n                var matrix = new jsidea.geom.Matrix3D();\r\n                matrix.appendPosition(lc);\r\n                matrix.append(transform.matrix);\r\n                return matrix.getPosition(ret);\r\n            };\r\n            Snap.DEFAULT = new Snap();\r\n            Snap._grid = new layout.Transform();\r\n            return Snap;\r\n        })();\r\n        layout.Snap = Snap;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/SnapMode/Basic.ts",
      "size": 760,
      "sizeMinified": 308,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var SnapMode;\r\n        (function (SnapMode) {\r\n            var BasicSnapMode = (function () {\r\n                function BasicSnapMode() {\r\n                }\r\n                BasicSnapMode.prototype.transform = function (snap, transform, point) {\r\n                    point.x = jsidea.math.Number.roundTo(point.x, 60);\r\n                    point.y = jsidea.math.Number.roundTo(point.y, 60);\r\n                };\r\n                return BasicSnapMode;\r\n            })();\r\n            SnapMode.BASIC = new BasicSnapMode();\r\n        })(SnapMode = layout.SnapMode || (layout.SnapMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/StyleNode.ts",
      "size": 16552,
      "sizeMinified": 6633,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var StyleNode = (function () {\r\n            function StyleNode() {\r\n            }\r\n            StyleNode.create = function (element) {\r\n                if (!element)\r\n                    return null;\r\n                return StyleNode.extractStyleChain(element);\r\n            };\r\n            StyleNode.extractStyleChain = function (element) {\r\n                var body = element.ownerDocument.body;\r\n                var html = element.ownerDocument.documentElement;\r\n                var nodes = [];\r\n                while (element) {\r\n                    var style = window.getComputedStyle(element);\r\n                    var node = {};\r\n                    node.element = element;\r\n                    node.first = null;\r\n                    node.child = null;\r\n                    node.parent = null;\r\n                    node.last = null;\r\n                    node.isTransformed = style.transform != \"none\";\r\n                    node.isTransformed3D = style.transform.indexOf(\"matrix3d\") >= 0;\r\n                    node.isPreserved3d = style.transformStyle == \"preserve-3d\";\r\n                    node.isScrollable = style.overflow != \"visible\";\r\n                    node.depth = 0;\r\n                    node.perspective = 0;\r\n                    node.isHTML = element == html;\r\n                    node.isBody = element == body;\r\n                    node.style = style;\r\n                    node.isForced2D = false;\r\n                    if (jsidea.system.Browser.isInternetExplorer)\r\n                        node.isPreserved3d = false;\r\n                    node.perspective = (jsidea.system.Engine.isWebKit && node.isTransformed && node.isScrollable) ? 0 : jsidea.math.Number.parse(style.perspective, 0);\r\n                    element._node = node;\r\n                    nodes.push(node);\r\n                    element = element.parentElement;\r\n                }\r\n                var first = nodes[nodes.length - 1];\r\n                var last = nodes[0];\r\n                var depth = 0;\r\n                node = first;\r\n                while (node) {\r\n                    node.first = first;\r\n                    node.last = last;\r\n                    node.depth = depth++;\r\n                    node.child = nodes[(nodes.length - node.depth) - 1];\r\n                    node.parent = nodes[(nodes.length - node.depth) + 1];\r\n                    node.isForced2D = this.getIsForced2D(node);\r\n                    node = node.child;\r\n                }\r\n                var chain = last;\r\n                var isTransformedChild = false;\r\n                var isPreserved3dChild = false;\r\n                var isFixedChild = false;\r\n                var isPerspectiveChild = false;\r\n                var node = chain.first;\r\n                while (node) {\r\n                    var style = node.style;\r\n                    var element = node.element;\r\n                    node.isPreserved3dChild = isPreserved3dChild;\r\n                    node.isPreserved3dOrPerspective = node.isPreserved3d || (node.perspective > 0);\r\n                    node.isPerspectiveChild = isPerspectiveChild;\r\n                    node.isFixedZombie = false;\r\n                    node.isFixed = style.position == \"fixed\";\r\n                    node.isFixedChild = isFixedChild;\r\n                    node.isRelative = style.position == \"relative\";\r\n                    node.isAbsolute = style.position == \"absolute\";\r\n                    node.isStatic = style.position == \"static\";\r\n                    node.isBorderBox = style.boxSizing == \"border-box\";\r\n                    node.offsetLeft = element.offsetLeft;\r\n                    node.offsetTop = element.offsetTop;\r\n                    if (jsidea.system.Engine.isWebKit) {\r\n                        if (node.isHTML) {\r\n                            node.offsetLeft = node.element.ownerDocument.body.offsetLeft;\r\n                            node.offsetTop = node.element.ownerDocument.body.offsetTop;\r\n                        }\r\n                        else if (node.isBody) {\r\n                            node.offsetLeft = 0;\r\n                            node.offsetTop = 0;\r\n                        }\r\n                    }\r\n                    node.clientLeft = element.clientLeft;\r\n                    node.clientTop = element.clientTop;\r\n                    node.isTransformedChild = isTransformedChild;\r\n                    node.offsetParentRaw = node.element.offsetParent ? node.element.offsetParent._node : null;\r\n                    node.isSticked = this.getIsSticked(node);\r\n                    node.isFixedZombie = node.isFixed && !node.isSticked;\r\n                    node.isStickedChild = this.getIsStickedChild(node);\r\n                    node.offsetParent = this.getOffsetParent(node);\r\n                    node.parentScroll = jsidea.system.Browser.isFirefox ? this.getParentScrollFirefox(node) : this.getParentScroll(node);\r\n                    node.scrollOffset = this.getScrollOffset(node);\r\n                    node.offset = this.getOffset(node);\r\n                    node.offsetUnscrolled = new jsidea.geom.Point2D(node.offset.x + node.scrollOffset.x, node.offset.y + node.scrollOffset.y);\r\n                    node.position = this.getPosition(node);\r\n                    if (!isTransformedChild && node.isTransformed)\r\n                        isTransformedChild = true;\r\n                    if (!isFixedChild && node.isFixed)\r\n                        isFixedChild = true;\r\n                    if (!isPreserved3dChild && node.isPreserved3d)\r\n                        isPreserved3dChild = true;\r\n                    if (!isPerspectiveChild && node.perspective > 0)\r\n                        isPerspectiveChild = true;\r\n                    node = node.child;\r\n                }\r\n                return chain;\r\n            };\r\n            StyleNode.getPosition = function (node, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point2D(); }\r\n                if (node.isSticked || !node.parent)\r\n                    return ret.setTo(node.offset.x, node.offset.y);\r\n                return ret.setTo(node.offset.x - node.parent.offset.x, node.offset.y - node.parent.offset.y);\r\n            };\r\n            StyleNode.getOffsetParent = function (node) {\r\n                //            if (system.Caps.isFirefox)\r\n                //                return node.element.offsetParent ? node.element.offsetParent._node : null;\r\n                if (node.isFixedZombie) {\r\n                    while (node = node.parent) {\r\n                        if (node.isBody || node.isSticked)\r\n                            return node;\r\n                        if (node.isStatic) {\r\n                            if (node.isTransformed || node.isPreserved3dOrPerspective)\r\n                                return node;\r\n                            else\r\n                                continue;\r\n                        }\r\n                        if ((node.isFixedZombie || !node.isPerspectiveChild) && !node.isTransformed && !node.isPreserved3dOrPerspective) {\r\n                            continue;\r\n                        }\r\n                        return node;\r\n                    }\r\n                    return null;\r\n                }\r\n                if (!node || node.isBody || node.isSticked)\r\n                    return null;\r\n                while (node = node.parent) {\r\n                    if (!node.isStatic || node.isTransformed || node.isPreserved3dOrPerspective || node.isSticked) {\r\n                        return node;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            StyleNode.getParentScroll = function (node) {\r\n                if (!node || node.isSticked || !node.parent)\r\n                    return null;\r\n                if (node.isFixedZombie)\r\n                    return node.offsetParent;\r\n                var excludeStaticParent = node.isAbsolute;\r\n                while ((node = node.parent) && node.parent) {\r\n                    if (node.isBody || node.isSticked)\r\n                        return node;\r\n                    if (excludeStaticParent && (node.isStatic && !node.isTransformed))\r\n                        continue;\r\n                    return node;\r\n                }\r\n                return null;\r\n            };\r\n            StyleNode.getParentScrollFirefox = function (node) {\r\n                if (!node || node.isSticked || !node.parent)\r\n                    return null;\r\n                if (node.isFixedZombie)\r\n                    return node.offsetParent;\r\n                var excludeStaticParent = node.isAbsolute;\r\n                while ((node = node.parent) && node.parent) {\r\n                    if (node.isBody || node.isSticked)\r\n                        return node;\r\n                    if (excludeStaticParent && (node.isStatic && !node.isTransformedChild))\r\n                        continue;\r\n                    return node;\r\n                }\r\n                return null;\r\n            };\r\n            StyleNode.getIsStickedChild = function (node) {\r\n                while (node) {\r\n                    if (node.isSticked)\r\n                        return true;\r\n                    node = node.parent;\r\n                }\r\n                return false;\r\n            };\r\n            StyleNode.getIsSticked = function (node) {\r\n                if (!node.isFixed)\r\n                    return false;\r\n                if (jsidea.system.Browser.isInternetExplorer || jsidea.system.Browser.isEdge)\r\n                    return node.isFixed && !(node.isPerspectiveChild || node.isPreserved3dOrPerspective);\r\n                while (node = node.parent) {\r\n                    if (node.isTransformed || node.isPreserved3dOrPerspective)\r\n                        return false;\r\n                }\r\n                return true;\r\n            };\r\n            StyleNode.getScrollOffset = function (node, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point2D(); }\r\n                if (!node || !node.parent)\r\n                    return ret;\r\n                if (node.isStickedChild) {\r\n                    if (jsidea.system.Engine.isWebKit) {\r\n                        ret.x -= node.element.ownerDocument.body.scrollLeft;\r\n                        ret.y -= node.element.ownerDocument.body.scrollTop;\r\n                    }\r\n                    else {\r\n                        ret.x -= node.element.ownerDocument.documentElement.scrollLeft;\r\n                        ret.y -= node.element.ownerDocument.documentElement.scrollTop;\r\n                    }\r\n                }\r\n                while ((node = node.parentScroll) && !node.isBody) {\r\n                    ret.x += node.element.scrollLeft;\r\n                    ret.y += node.element.scrollTop;\r\n                }\r\n                return ret;\r\n            };\r\n            StyleNode.getOffset = function (node, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point2D(); }\r\n                ret.x = 0;\r\n                ret.y = 0;\r\n                if (!node)\r\n                    return ret;\r\n                ret.x -= node.scrollOffset.x;\r\n                ret.y -= node.scrollOffset.y;\r\n                if (node.isSticked) {\r\n                    this.addCorrectOffset(node, ret);\r\n                    return ret;\r\n                }\r\n                var leafNode = node;\r\n                while (node) {\r\n                    this.addCorrectOffset(node, ret);\r\n                    if (!node.offsetParentRaw)\r\n                        break;\r\n                    node = node.offsetParent;\r\n                }\r\n                return ret;\r\n            };\r\n            StyleNode.getIsForced2D = function (node) {\r\n                if (jsidea.system.Browser.isInternetExplorer)\r\n                    return false;\r\n                if (node.isBody || !node.isTransformed3D)\r\n                    return false;\r\n                if (!node.parent.isPreserved3d && node.parent.perspective == 0)\r\n                    return true;\r\n                if (node.parent.isScrollable)\r\n                    return true;\r\n                return false;\r\n            };\r\n            StyleNode.addCorrectOffset = function (node, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point2D(); }\r\n                if (!node)\r\n                    return ret;\r\n                ret.x += node.offsetLeft;\r\n                ret.y += node.offsetTop;\r\n                if (jsidea.system.Engine.isWebKit) {\r\n                    this.getCorrectOffsetWebkit(node, ret);\r\n                }\r\n                else if (jsidea.system.Browser.isFirefox) {\r\n                    this.getCorrectOffsetFirefox(node, ret);\r\n                }\r\n                else if (jsidea.system.Browser.isInternetExplorer) {\r\n                    this.getCorrectOffsetInternetExplorer(node, ret);\r\n                }\r\n                else if (jsidea.system.Browser.isEdge) {\r\n                    this.getCorrectOffsetEdge(node, ret);\r\n                }\r\n                return ret;\r\n            };\r\n            StyleNode.getCorrectOffsetEdge = function (node, ret) {\r\n                if (!node || !node.offsetParent || node.isBody)\r\n                    return ret;\r\n                if (node.offsetParent.element != node.element.offsetParent) {\r\n                    return ret;\r\n                }\r\n                ret.x += node.offsetParent.clientLeft;\r\n                ret.y += node.offsetParent.clientTop;\r\n            };\r\n            StyleNode.getCorrectOffsetInternetExplorer = function (node, ret) {\r\n                if (!node || !node.offsetParent || node.isBody)\r\n                    return ret;\r\n                if (node.offsetParent.element != node.element.offsetParent) {\r\n                    return ret;\r\n                }\r\n                ret.x += node.offsetParent.clientLeft;\r\n                ret.y += node.offsetParent.clientTop;\r\n            };\r\n            StyleNode.getCorrectOffsetFirefox = function (node, ret) {\r\n                if (!node)\r\n                    return ret;\r\n                if (!node.offsetParent) {\r\n                    if ((node.isStatic || node.isRelative) && !node.isHTML) {\r\n                        ret.x += node.element.ownerDocument.body.clientLeft;\r\n                        ret.y += node.element.ownerDocument.body.clientTop;\r\n                    }\r\n                    return ret;\r\n                }\r\n                if (!node.offsetParent.isBorderBox) {\r\n                    ret.x += node.offsetParent.clientLeft;\r\n                    ret.y += node.offsetParent.clientTop;\r\n                }\r\n                if ((node.isAbsolute || node.isFixedZombie)\r\n                    && node.offsetParent.isScrollable) {\r\n                    ret.x += node.offsetParent.clientLeft;\r\n                    ret.y += node.offsetParent.clientTop;\r\n                }\r\n                if (node.offsetParent.element == node.element.offsetParent)\r\n                    return ret;\r\n                console.warn(\"The given offsetParent is maybe wrong.\");\r\n                return ret;\r\n            };\r\n            StyleNode.getCorrectOffsetWebkit = function (node, ret) {\r\n                if (!node || !node.offsetParent)\r\n                    return ret;\r\n                if (node.offsetParentRaw != node.offsetParent) {\r\n                    if (!node.offsetParentRaw) {\r\n                        ret.x += node.offsetParent.offsetUnscrolled.x;\r\n                        ret.y += node.offsetParent.offsetUnscrolled.y;\r\n                    }\r\n                    else {\r\n                        if (node.isBody || node.isAbsolute || node.offsetParent.isBody) {\r\n                        }\r\n                        else {\r\n                            ret.x -= node.offsetParent.offsetUnscrolled.x - node.offsetParentRaw.offsetLeft;\r\n                            ret.y -= node.offsetParent.offsetUnscrolled.y - node.offsetParentRaw.offsetTop;\r\n                        }\r\n                    }\r\n                }\r\n                else if (node.offsetParent) {\r\n                    if (node.offsetParent.isBody || node.isFixedZombie) {\r\n                    }\r\n                    else if (!node.offsetParent.isStatic) {\r\n                        ret.x += node.offsetParent.clientLeft;\r\n                        ret.y += node.offsetParent.clientTop;\r\n                    }\r\n                }\r\n                return ret;\r\n            };\r\n            return StyleNode;\r\n        })();\r\n        layout.StyleNode = StyleNode;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/Transform.ts",
      "size": 6742,
      "sizeMinified": 3298,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var Transform = (function () {\r\n            function Transform(element, mode) {\r\n                this.element = null;\r\n                this.toBox = layout.BoxModel.BORDER;\r\n                this.fromBox = layout.BoxModel.BORDER;\r\n                this.matrix = new jsidea.geom.Matrix3D();\r\n                this.sceneTransform = new jsidea.geom.Matrix3D();\r\n                this.inverseSceneTransform = new jsidea.geom.Matrix3D();\r\n                this.size = new layout.Box();\r\n                if (element)\r\n                    this.update(element, mode);\r\n            }\r\n            Transform.create = function (element, mode) {\r\n                return new Transform(element, mode);\r\n            };\r\n            Transform.prototype.update = function (element, mode) {\r\n                if (!element)\r\n                    return this.clear();\r\n                this.element = element;\r\n                mode = mode || layout.TransformMode.RECTANGLE;\r\n                mode = layout.TransformMode.PLANAR;\r\n                var style = window.getComputedStyle(element);\r\n                this.size.update(element, style);\r\n                this.matrix.setCSS(style.transform);\r\n                this.sceneTransform.identity();\r\n                mode.extract(this, this.sceneTransform);\r\n                this.sceneTransform.invert(this.inverseSceneTransform);\r\n                return this;\r\n            };\r\n            Transform.prototype.append = function (matrix) {\r\n                matrix = matrix.clone();\r\n                this.matrix.append(matrix);\r\n                this.sceneTransform.append(matrix);\r\n                this.sceneTransform.invert(this.inverseSceneTransform);\r\n                return this;\r\n            };\r\n            Transform.prototype.prepend = function (matrix) {\r\n                matrix = matrix.clone();\r\n                this.matrix.prepend(matrix);\r\n                this.sceneTransform.prepend(matrix);\r\n                this.sceneTransform.invert(this.inverseSceneTransform);\r\n                return this;\r\n            };\r\n            Transform.prototype.clear = function () {\r\n                this.element = null;\r\n                this.size.clear();\r\n                this.matrix.identity();\r\n                return this;\r\n            };\r\n            Transform.prototype.localToLocalPoint = function (to, pt, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                return this.localToLocal(to, pt.x, pt.y, pt.z, fromBox, toBox, ret);\r\n            };\r\n            Transform.prototype.localToLocalQuad = function (to, quad, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Quad(); }\r\n                this.localToLocalPoint(to, quad.p1, fromBox, toBox, ret.p1);\r\n                this.localToLocalPoint(to, quad.p2, fromBox, toBox, ret.p2);\r\n                this.localToLocalPoint(to, quad.p3, fromBox, toBox, ret.p3);\r\n                this.localToLocalPoint(to, quad.p4, fromBox, toBox, ret.p4);\r\n                return ret;\r\n            };\r\n            Transform.prototype.localToLocal = function (to, x, y, z, fromBox, toBox, ret) {\r\n                if (z === void 0) { z = 0; }\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                ret.setTo(x, y, z);\r\n                var gl = this.localToGlobalPoint(ret, fromBox, layout.BoxModel.BORDER, ret);\r\n                return to.globalToLocalPoint(gl, layout.BoxModel.BORDER, toBox, ret);\r\n            };\r\n            Transform.prototype.globalToLocalPoint = function (point, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                return this.globalToLocal(point.x, point.y, point.z, fromBox, toBox, ret);\r\n            };\r\n            Transform.prototype.globalToLocalQuad = function (quad, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Quad(); }\r\n                this.globalToLocalPoint(quad.p1, fromBox, toBox, ret.p1);\r\n                this.globalToLocalPoint(quad.p2, fromBox, toBox, ret.p2);\r\n                this.globalToLocalPoint(quad.p3, fromBox, toBox, ret.p3);\r\n                this.globalToLocalPoint(quad.p4, fromBox, toBox, ret.p4);\r\n                return ret;\r\n            };\r\n            Transform.prototype.globalToLocal = function (x, y, z, fromBox, toBox, ret) {\r\n                if (z === void 0) { z = 0; }\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                ret.setTo(x, y, z);\r\n                this.size.transform(ret, fromBox || this.fromBox, layout.BoxModel.BORDER);\r\n                this.inverseSceneTransform.unproject(ret, ret);\r\n                this.size.transform(ret, layout.BoxModel.BORDER, toBox || this.toBox);\r\n                return ret;\r\n            };\r\n            Transform.prototype.localToGlobalPoint = function (point, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                return this.localToGlobal(point.x, point.y, point.z, fromBox, toBox, ret);\r\n            };\r\n            Transform.prototype.localToGlobalQuad = function (quad, fromBox, toBox, ret) {\r\n                if (ret === void 0) { ret = new jsidea.geom.Quad(); }\r\n                this.localToGlobalPoint(quad.p1, fromBox, toBox, ret.p1);\r\n                this.localToGlobalPoint(quad.p2, fromBox, toBox, ret.p2);\r\n                this.localToGlobalPoint(quad.p3, fromBox, toBox, ret.p3);\r\n                this.localToGlobalPoint(quad.p4, fromBox, toBox, ret.p4);\r\n                return ret;\r\n            };\r\n            Transform.prototype.localToGlobal = function (x, y, z, fromBox, toBox, ret) {\r\n                if (z === void 0) { z = 0; }\r\n                if (ret === void 0) { ret = new jsidea.geom.Point3D(); }\r\n                ret.setTo(x, y, z);\r\n                this.size.transform(ret, fromBox || this.fromBox, layout.BoxModel.BORDER);\r\n                this.sceneTransform.project(ret, ret);\r\n                this.size.transform(ret, layout.BoxModel.BORDER, toBox || this.toBox);\r\n                return ret;\r\n            };\r\n            Transform.prototype.dispose = function () {\r\n                this.element = null;\r\n                this.toBox = null;\r\n                this.fromBox = null;\r\n                this.matrix = null;\r\n                this.size = null;\r\n                this.sceneTransform = null;\r\n                this.inverseSceneTransform = null;\r\n            };\r\n            return Transform;\r\n        })();\r\n        layout.Transform = Transform;\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/TransformMode/Perspective.ts",
      "size": 3206,
      "sizeMinified": 1213,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var TransformMode;\r\n        (function (TransformMode) {\r\n            var Perspective = (function () {\r\n                function Perspective() {\r\n                }\r\n                Perspective.prototype.extract = function (transform, matrix) {\r\n                    var element = transform.element;\r\n                    var node = layout.StyleNode.create(element);\r\n                    while (node) {\r\n                        this.extractMatrix(node, matrix);\r\n                        if (node && node.isSticked)\r\n                            break;\r\n                        node = node.parent;\r\n                    }\r\n                };\r\n                Perspective.prototype.extractMatrix = function (node, matrix) {\r\n                    if (matrix === void 0) { matrix = null; }\r\n                    if (!matrix)\r\n                        matrix = new jsidea.geom.Matrix3D();\r\n                    if (!node)\r\n                        return matrix;\r\n                    var element = node.element;\r\n                    var style = node.style;\r\n                    if (node.isTransformed) {\r\n                        var origin = style.transformOrigin ? style.transformOrigin.split(\" \") : [];\r\n                        var originX = jsidea.math.Number.relation(origin[0], element.offsetWidth, element.offsetWidth * 0.5);\r\n                        var originY = jsidea.math.Number.relation(origin[1], element.offsetHeight, element.offsetHeight * 0.5);\r\n                        var originZ = jsidea.math.Number.parse(origin[2], 0);\r\n                        matrix.appendPositionRaw(-originX, -originY, -originZ);\r\n                        matrix.appendCSS(style.transform, node.isForced2D);\r\n                        matrix.appendPositionRaw(originX, originY, originZ);\r\n                    }\r\n                    matrix.appendPositionRaw(node.position.x, node.position.y, 0);\r\n                    if (node.parent && node.parent.perspective) {\r\n                        var perspective = node.parent.perspective;\r\n                        var parentStyle = node.parent.style;\r\n                        var perspectiveOrigin = parentStyle.perspectiveOrigin.split(\" \");\r\n                        var perspectiveOriginX = jsidea.math.Number.relation(perspectiveOrigin[0], element.parentElement.offsetWidth, 0);\r\n                        var perspectiveOriginY = jsidea.math.Number.relation(perspectiveOrigin[1], element.parentElement.offsetHeight, 0);\r\n                        matrix.appendPositionRaw(-perspectiveOriginX, -perspectiveOriginY, 0);\r\n                        matrix.appendPerspective(perspective);\r\n                        matrix.appendPositionRaw(perspectiveOriginX, perspectiveOriginY, 0);\r\n                    }\r\n                    return matrix;\r\n                };\r\n                Perspective._matrix = new jsidea.geom.Matrix3D();\r\n                return Perspective;\r\n            })();\r\n            TransformMode.PERSPECTIVE = new Perspective();\r\n        })(TransformMode = layout.TransformMode || (layout.TransformMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/TransformMode/Planar.ts",
      "size": 2947,
      "sizeMinified": 1023,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var TransformMode;\r\n        (function (TransformMode) {\r\n            var Planar = (function () {\r\n                function Planar() {\r\n                }\r\n                Planar.prototype.extract = function (transform, matrix) {\r\n                    var element = transform.element;\r\n                    var globalBounds = jsidea.geom.Rect2D.getBounds(element);\r\n                    var elements = [];\r\n                    var target = element;\r\n                    while (target) {\r\n                        elements.push(target);\r\n                        target = target.parentElement;\r\n                    }\r\n                    elements.reverse();\r\n                    var parentStyle = null;\r\n                    for (var _i = 0; _i < elements.length; _i++) {\r\n                        var e = elements[_i];\r\n                        var style = window.getComputedStyle(e);\r\n                        var isForced2D = this.getIsForced2D(e, style, parentStyle);\r\n                        matrix.prependCSS(style.transform, isForced2D);\r\n                        parentStyle = style;\r\n                    }\r\n                    var localBounds = matrix.bounds(0, 0, element.offsetWidth, element.offsetHeight);\r\n                    var scX = globalBounds.width / localBounds.width;\r\n                    var scY = globalBounds.height / localBounds.height;\r\n                    matrix.appendScaleRaw(scX, scY, 1);\r\n                    matrix.appendPositionRaw(-localBounds.x, -localBounds.y, 0);\r\n                    matrix.appendPositionRaw(globalBounds.x, globalBounds.y, 0);\r\n                };\r\n                Planar.prototype.getIsForced2D = function (element, style, parentStyle) {\r\n                    if (!element.parentElement || jsidea.system.Browser.isInternetExplorer || element.tagName == \"body\" || !(style.transform != \"none\"))\r\n                        return false;\r\n                    var perspective = jsidea.math.Number.parse(parentStyle.perspective, 0);\r\n                    if (jsidea.system.Engine.isWebKit) {\r\n                        var isScrollable = parentStyle.overflow != \"visible\";\r\n                        var isTransformed = parentStyle.transform != \"none\";\r\n                        if (isTransformed && isScrollable)\r\n                            perspective = 0;\r\n                    }\r\n                    var isPreserved3d = parentStyle.transformStyle == \"preserve-3d\";\r\n                    if ((!isPreserved3d && perspective == 0) || parentStyle.overflow != \"visible\")\r\n                        return true;\r\n                    return false;\r\n                };\r\n                return Planar;\r\n            })();\r\n            TransformMode.PLANAR = new Planar();\r\n        })(TransformMode = layout.TransformMode || (layout.TransformMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/TransformMode/Rectangle.ts",
      "size": 794,
      "sizeMinified": 322,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var TransformMode;\r\n        (function (TransformMode) {\r\n            var Rectangle = (function () {\r\n                function Rectangle() {\r\n                }\r\n                Rectangle.prototype.extract = function (transform, matrix) {\r\n                    var globalBounds = jsidea.geom.Rect2D.getBounds(transform.element);\r\n                    matrix.appendPositionRaw(globalBounds.x, globalBounds.y, 0);\r\n                };\r\n                return Rectangle;\r\n            })();\r\n            TransformMode.RECTANGLE = new Rectangle();\r\n        })(TransformMode = layout.TransformMode || (layout.TransformMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/layout/TransformMode/Test.ts",
      "size": 1595,
      "sizeMinified": 599,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var layout;\r\n    (function (layout) {\r\n        var TransformMode;\r\n        (function (TransformMode) {\r\n            var Test = (function () {\r\n                function Test() {\r\n                }\r\n                Test.prototype.extract = function (transform, matrix) {\r\n                    var element = transform.element;\r\n                    var globalBounds = jsidea.geom.Rect2D.getBounds(element);\r\n                    while (element) {\r\n                        matrix.append(jsidea.geom.Matrix3D.create(element));\r\n                        element = element.parentElement;\r\n                    }\r\n                    element = transform.element;\r\n                    var localBounds = matrix.bounds(0, 0, element.offsetWidth, element.offsetHeight);\r\n                    var scX = globalBounds.width / localBounds.width;\r\n                    var scY = globalBounds.height / localBounds.height;\r\n                    matrix.appendScaleRaw(scX, scY, 1);\r\n                    element = transform.element;\r\n                    var localBounds = matrix.bounds(0, 0, element.offsetWidth, element.offsetHeight);\r\n                    matrix.appendPositionRaw(-localBounds.x, -localBounds.y, 0);\r\n                    matrix.appendPositionRaw(globalBounds.x, globalBounds.y, 0);\r\n                };\r\n                return Test;\r\n            })();\r\n            TransformMode.TEST = new Test();\r\n        })(TransformMode = layout.TransformMode || (layout.TransformMode = {}));\r\n    })(layout = jsidea.layout || (jsidea.layout = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/math/ILimit.ts",
      "size": 0,
      "sizeMinified": 0,
      "code": ""
    },
    {
      "name": "src/jsidea/math/Number.ts",
      "size": 4768,
      "sizeMinified": 1673,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var math;\r\n    (function (math) {\r\n        var Number = (function () {\r\n            function Number() {\r\n            }\r\n            Number.precision = function (num, precesion) {\r\n                return Math.round(num * precesion) / precesion;\r\n            };\r\n            Number.relation = function (value, relativeSize, defaultValue) {\r\n                if (typeof value == \"number\") {\r\n                    return value;\r\n                }\r\n                else if (typeof value == \"string\") {\r\n                    value = value.trim().toLowerCase();\r\n                    if (value.indexOf(\"%\") > 0) {\r\n                        return (Number.parse(value.replace(\"%\", \"\"), defaultValue) / 100) * relativeSize;\r\n                    }\r\n                    else if (value.indexOf(\"px\") > 0 || value.indexOf(\"pt\") > 0) {\r\n                        return Number.parse(value.replace(\"px\", \"\"), defaultValue);\r\n                    }\r\n                    else if (value.indexOf(\"vw\") > 0) {\r\n                        return (Number.parse(value.replace(\"vw\", \"\"), defaultValue) / 100) * window.innerWidth;\r\n                    }\r\n                    else if (value.indexOf(\"vh\") > 0) {\r\n                        return (Number.parse(value.replace(\"vh\", \"\"), defaultValue) / 100) * window.innerHeight;\r\n                    }\r\n                    else if (value.indexOf(\"vm\") > 0) {\r\n                        return (Number.parse(value.replace(\"vm\", \"\"), defaultValue) / 100) * Math.min(window.innerWidth, window.innerHeight);\r\n                    }\r\n                    else if (value.indexOf(\"em\") > 0) {\r\n                        return Number.parse(value.replace(\"em\", \"\"), defaultValue);\r\n                    }\r\n                    else if (value == \"top\" || value == \"left\")\r\n                        return 0;\r\n                    else if (value == \"center\" || value == \"middle\")\r\n                        return relativeSize * 0.5;\r\n                    else if (value == \"bottom\" || value == \"right\")\r\n                        return relativeSize;\r\n                    return defaultValue;\r\n                }\r\n                return defaultValue;\r\n            };\r\n            Number.parse = function (value, defaultValue) {\r\n                value = parseFloat(value);\r\n                if (isNaN(value))\r\n                    return defaultValue;\r\n                return value;\r\n            };\r\n            Number.clamp = function (value, min, max) {\r\n                if (min > max) {\r\n                    var tmp = max;\r\n                    max = min;\r\n                    min = tmp;\r\n                }\r\n                return (value < min) ? min : ((value > max) ? max : value);\r\n            };\r\n            Number.roundTo = function (value, mod) {\r\n                var r = value % mod;\r\n                return (r < (mod * 0.5)) ? value - r : value + (mod - r);\r\n            };\r\n            Number.floorTo = function (value, mod) {\r\n                return value - (value % mod);\r\n            };\r\n            Number.prototype.shortRotation = function (startRotation, endRotation) {\r\n                var dif = (endRotation - startRotation) % 360;\r\n                if (dif != dif % 180)\r\n                    dif = (dif < 0) ? dif + 360 : dif - 360;\r\n                return dif;\r\n            };\r\n            Number.limits = function (point, limits, width, height, depth) {\r\n                if (depth === void 0) { depth = 1000; }\r\n                if (limits.minX !== undefined)\r\n                    point.x = Math.max(point.x, Number.relation(limits.minX, width, point.x));\r\n                if (limits.maxX !== undefined)\r\n                    point.x = Math.min(point.x, Number.relation(limits.maxX, width, point.x));\r\n                if (limits.minY !== undefined)\r\n                    point.y = Math.max(point.y, Number.relation(limits.minY, height, point.y));\r\n                if (limits.maxY !== undefined)\r\n                    point.y = Math.min(point.y, Number.relation(limits.maxY, height, point.y));\r\n                if (limits.minZ !== undefined)\r\n                    point.z = Math.max(point.z, Number.relation(limits.minZ, depth, point.z));\r\n                if (limits.maxY !== undefined)\r\n                    point.z = Math.min(point.z, Number.relation(limits.maxZ, depth, point.z));\r\n                return point;\r\n            };\r\n            Number.RAD_TO_DEG = 180 / Math.PI;\r\n            Number.DEG_TO_RAD = Math.PI / 180;\r\n            Number.BYTE_TO_KILOBYTE = 0.000976563;\r\n            Number.BYTE_TO_MB = 9.53674e-7;\r\n            Number.BYTE_TO_GIGABYTE = 9.31323e-10;\r\n            return Number;\r\n        })();\r\n        math.Number = Number;\r\n    })(math = jsidea.math || (jsidea.math = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/model/Dictionary.ts",
      "size": 2178,
      "sizeMinified": 971,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var model;\r\n    (function (model) {\r\n        var Dictonary = (function () {\r\n            function Dictonary() {\r\n                this._keys = [];\r\n                this._values = [];\r\n            }\r\n            Dictonary.prototype.getValue = function (key) {\r\n                return this._values[this._keys.indexOf(key)];\r\n            };\r\n            Dictonary.prototype.setValue = function (key, value) {\r\n                var index = this._keys.indexOf(key);\r\n                if (index < 0) {\r\n                    this._keys.push(key);\r\n                    this._values.push(value);\r\n                    return value;\r\n                }\r\n                this._values[index] = value;\r\n                return value;\r\n            };\r\n            Dictonary.prototype.hasKey = function (key) {\r\n                return this._keys.indexOf(key) >= 0;\r\n            };\r\n            Dictonary.prototype.hasValue = function (value) {\r\n                return this._values.indexOf(value) >= 0;\r\n            };\r\n            Dictonary.prototype.clear = function () {\r\n                this._keys.splice(0, this._keys.length);\r\n                this._values.splice(0, this._values.length);\r\n            };\r\n            Dictonary.prototype.removeKey = function (key) {\r\n                var index = this._keys.indexOf(key);\r\n                if (index < 0)\r\n                    return null;\r\n                var value = this._values[index];\r\n                this._keys.splice(index, 1);\r\n                this._values.splice(index, 1);\r\n                return value;\r\n            };\r\n            Dictonary.prototype.getKeys = function (value) {\r\n                var res = [];\r\n                var index = 0;\r\n                while ((index = this._values.indexOf(value, index)) >= 0)\r\n                    res.push(this._keys[index]);\r\n                return res;\r\n            };\r\n            Dictonary.prototype.length = function () {\r\n                return this._keys.length;\r\n            };\r\n            return Dictonary;\r\n        })();\r\n        model.Dictonary = Dictonary;\r\n    })(model = jsidea.model || (jsidea.model = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/plugins/Dependency.ts",
      "size": 11564,
      "sizeMinified": 4980,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var plugins;\r\n    (function (plugins) {\r\n        var DependencyUI = (function () {\r\n            function DependencyUI(reference) {\r\n                this._reference = reference;\r\n                this._element = document.createElement(\"div\");\r\n                var e = this._element;\r\n                e.className = \"entry\";\r\n                e.id = reference.fullName;\r\n                e.setAttribute(\"data-checked\", \"0\");\r\n                e.setAttribute(\"data-dependent\", \"0\");\r\n                e.setAttribute(\"data-kind\", reference.kind.toString());\r\n                var chk = document.createElement(\"div\");\r\n                chk.className = \"checkbox\";\r\n                e.appendChild(chk);\r\n                var lab = document.createElement(\"div\");\r\n                lab.className = \"label\";\r\n                lab.textContent = reference.name + \" [\" + jsidea.text.Text.fileSize(reference.file.size) + \" \" + jsidea.text.Text.fileSize(reference.file.sizeMinified) + \"]\";\r\n                e.appendChild(lab);\r\n            }\r\n            DependencyUI.prototype.getElement = function () {\r\n                return this._element;\r\n            };\r\n            DependencyUI.prototype.setChecked = function (checked) {\r\n                this._element.setAttribute(\"data-checked\", checked ? \"1\" : \"0\");\r\n            };\r\n            DependencyUI.prototype.setDependent = function (dependent) {\r\n                this._element.setAttribute(\"data-dependent\", dependent ? \"1\" : \"0\");\r\n            };\r\n            return DependencyUI;\r\n        })();\r\n        plugins.DependencyUI = DependencyUI;\r\n        var Dependency = (function (_super) {\r\n            __extends(Dependency, _super);\r\n            function Dependency() {\r\n                var _this = this;\r\n                _super.call(this);\r\n                this.symbols = null;\r\n                this.files = null;\r\n                this._list = null;\r\n                this._ajax = new XMLHttpRequest();\r\n                this._ajax.onreadystatechange = function (e) { return _this.onReadyStateChange(e); };\r\n                var project = \"jsidea\";\r\n                var version = \"0.0.1\";\r\n                this.load(\"http://127.0.0.1/eventfive/jsidea-website/build/\" + project + \"/\" + version + \"/\" + project + \".build.json\");\r\n            }\r\n            Dependency.prototype.load = function (url) {\r\n                this._ajax.open(\"GET\", url);\r\n                this._ajax.send(null);\r\n            };\r\n            Dependency.prototype.onReadyStateChange = function (e) {\r\n                if (this._ajax.readyState == 4) {\r\n                    if (this._ajax.status == 200) {\r\n                        this.parse(JSON.parse(this._ajax.responseText));\r\n                    }\r\n                    else {\r\n                        console.log(this._ajax.statusText);\r\n                    }\r\n                }\r\n            };\r\n            Dependency.prototype.parse = function (dat) {\r\n                var data = dat.typescript;\r\n                this._list = document.createElement(\"div\");\r\n                this._list.id = \"list\";\r\n                document.body.appendChild(this._list);\r\n                this.symbols = data;\r\n                this.files = dat.files;\r\n                var refs = this.symbols;\r\n                for (var _i = 0; _i < refs.length; _i++) {\r\n                    var ref = refs[_i];\r\n                    ref.file = this.getFileByName(ref.file);\r\n                    for (var i = 0; i < ref.imports.length; ++i)\r\n                        ref.imports[i] = this.getByQualifiedName(ref.imports[i]);\r\n                    var path = ref.fullName.split(\".\");\r\n                    ref.name = path[path.length - 1];\r\n                    ref.package = path.splice(0, path.length - 1).join(\".\");\r\n                    ref.isDependent = false;\r\n                    ref.isChecked = false;\r\n                    ref.ui = this.createElement(ref);\r\n                    if (!ref.usage)\r\n                        ref.usage = [];\r\n                    for (var _a = 0, _b = ref.imports; _a < _b.length; _a++) {\r\n                        var chi = _b[_a];\r\n                        if (!chi.usage)\r\n                            chi.usage = [];\r\n                        if (chi.usage.indexOf(ref) === -1)\r\n                            chi.usage.push(ref);\r\n                    }\r\n                }\r\n                for (var _c = 0; _c < refs.length; _c++) {\r\n                    var ref = refs[_c];\r\n                    ref.relations = this.createRelations(ref);\r\n                }\r\n                this.sort(Dependency.SORT_MODULE);\r\n                var ordered = this.getOrderedSymbols();\r\n                var i = 0;\r\n                for (var _d = 0; _d < ordered.length; _d++) {\r\n                    var ref = ordered[_d];\r\n                    ref.usageOrder = i++;\r\n                }\r\n                this.sort(Dependency.SORT_MODULE);\r\n            };\r\n            Dependency.prototype.getOrderedSymbols = function () {\r\n                function addAt(ary, data, index) {\r\n                    var head = ary.slice(0, index);\r\n                    var tail = ary.slice(index);\r\n                    ary.splice(0, ary.length);\r\n                    for (var _i = 0; _i < head.length; _i++) {\r\n                        var da = head[_i];\r\n                        ary.push(da);\r\n                    }\r\n                    ary.push(data);\r\n                    for (var _a = 0; _a < tail.length; _a++) {\r\n                        var da = tail[_a];\r\n                        ary.push(da);\r\n                    }\r\n                    return ary;\r\n                }\r\n                var symbols = this.symbols;\r\n                var res = [];\r\n                for (var _i = 0; _i < symbols.length; _i++) {\r\n                    var ref = symbols[_i];\r\n                    var l = res.length;\r\n                    for (var i = 0; i < l; ++i) {\r\n                        if (res[i] == ref)\r\n                            continue;\r\n                        if (res[i].relations.indexOf(ref) >= 0) {\r\n                            addAt(res, ref, i);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (res.indexOf(ref) === -1)\r\n                        res.push(ref);\r\n                }\r\n                return res;\r\n            };\r\n            Dependency.prototype.getFileByName = function (name) {\r\n                for (var _i = 0, _a = this.files; _i < _a.length; _i++) {\r\n                    var file = _a[_i];\r\n                    if (file.name == name)\r\n                        return file;\r\n                }\r\n                return null;\r\n            };\r\n            Dependency.prototype.getByQualifiedName = function (name) {\r\n                var refs = this.symbols;\r\n                for (var _i = 0; _i < refs.length; _i++) {\r\n                    var ref = refs[_i];\r\n                    if (ref.fullName == name)\r\n                        return ref;\r\n                }\r\n                return null;\r\n            };\r\n            Dependency.prototype.createRelations = function (ref, relations) {\r\n                relations = relations || [];\r\n                for (var _i = 0, _a = ref.imports; _i < _a.length; _i++) {\r\n                    var imp = _a[_i];\r\n                    if (relations.indexOf(imp) < 0) {\r\n                        relations.push(imp);\r\n                        this.createRelations(imp, relations);\r\n                    }\r\n                }\r\n                return relations;\r\n            };\r\n            Dependency.prototype.createElement = function (ref) {\r\n                var _this = this;\r\n                var element = new DependencyUI(ref);\r\n                this._list.appendChild(element.getElement());\r\n                element.getElement().addEventListener(\"click\", function () { return _this.onClickElement(ref); });\r\n                return element;\r\n            };\r\n            Dependency.prototype.onClickElement = function (ref) {\r\n                ref.isChecked = !ref.isChecked;\r\n                this.refreshDependency();\r\n            };\r\n            Dependency.prototype.refreshDependency = function () {\r\n                var checked = [];\r\n                for (var _i = 0, _a = this.symbols; _i < _a.length; _i++) {\r\n                    var ref = _a[_i];\r\n                    ref.isDependent = false;\r\n                    if (ref.isChecked)\r\n                        checked.push(ref);\r\n                }\r\n                for (var _b = 0; _b < checked.length; _b++) {\r\n                    var ref = checked[_b];\r\n                    for (var _c = 0, _d = ref.relations; _c < _d.length; _c++) {\r\n                        var rel = _d[_c];\r\n                        rel.isDependent = true;\r\n                    }\r\n                }\r\n                var size = this.getSize();\r\n                console.log(\"SIZE\", jsidea.text.Text.fileSize(size.bytesMinified));\r\n                this.refreshUI();\r\n            };\r\n            Dependency.prototype.getSize = function () {\r\n                var files = [];\r\n                for (var _i = 0, _a = this.symbols; _i < _a.length; _i++) {\r\n                    var ref = _a[_i];\r\n                    if (ref.isDependent)\r\n                        if (files.indexOf(ref.file) === -1)\r\n                            files.push(ref.file);\r\n                }\r\n                var bytesMinified = 0;\r\n                var bytes = 0;\r\n                for (var _b = 0; _b < files.length; _b++) {\r\n                    var file = files[_b];\r\n                    bytes += file.size;\r\n                    bytesMinified += file.sizeMinified;\r\n                }\r\n                return { bytes: bytes, bytesMinified: bytesMinified };\r\n            };\r\n            Dependency.prototype.sort = function (f) {\r\n                this.symbols.sort(f);\r\n                var display = this._list.style.display;\r\n                this._list.style.display = \"none\";\r\n                for (var _i = 0, _a = this.symbols; _i < _a.length; _i++) {\r\n                    var symbol = _a[_i];\r\n                    this._list.appendChild(symbol.ui.getElement());\r\n                }\r\n                this._list.style.display = display;\r\n            };\r\n            Dependency.prototype.refreshUI = function () {\r\n                for (var _i = 0, _a = this.symbols; _i < _a.length; _i++) {\r\n                    var ref = _a[_i];\r\n                    ref.ui.setChecked(ref.isChecked);\r\n                    ref.ui.setDependent(ref.isDependent);\r\n                }\r\n            };\r\n            Dependency.SORT_FILESIZE = function (a, b) {\r\n                return a.file.size - b.file.size;\r\n            };\r\n            Dependency.SORT_USAGE = function (a, b) {\r\n                return a.usageOrder - b.usageOrder;\r\n            };\r\n            Dependency.SORT_MODULE = function (a, b) {\r\n                if (a.package != b.package)\r\n                    return a.package.localeCompare(b.package);\r\n                if (a.name != b.name)\r\n                    return a.name.localeCompare(b.name);\r\n                return a.fullName.localeCompare(b.fullName);\r\n            };\r\n            return Dependency;\r\n        })(plugins.Plugin);\r\n        plugins.Dependency = Dependency;\r\n    })(plugins = jsidea.plugins || (jsidea.plugins = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/plugins/Plugin.ts",
      "size": 4210,
      "sizeMinified": 1990,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var plugins;\r\n    (function (plugins) {\r\n        var Plugin = (function (_super) {\r\n            __extends(Plugin, _super);\r\n            function Plugin() {\r\n                _super.call(this);\r\n                this._active = false;\r\n                this._autoActive = false;\r\n                this._autoTick = false;\r\n                this._frameRate = 60;\r\n                this._tickInterval = 0;\r\n                this.autoActive = true;\r\n                this.autoTick = true;\r\n                this.tick();\r\n            }\r\n            Object.defineProperty(Plugin.prototype, \"active\", {\r\n                get: function () {\r\n                    return this._active;\r\n                },\r\n                set: function (value) {\r\n                    if (this._active == value)\r\n                        return;\r\n                    this._active = value;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Object.defineProperty(Plugin.prototype, \"autoActive\", {\r\n                get: function () {\r\n                    return this._autoActive;\r\n                },\r\n                set: function (value) {\r\n                    var _this = this;\r\n                    if (this._autoActive == value)\r\n                        return;\r\n                    this._autoActive = value;\r\n                    if (this._autoActive) {\r\n                        this._active = document.visibilityState == \"visible\";\r\n                        document.addEventListener(\"visibilitychange\", function () { return _this.onVisibilityChange(); });\r\n                    }\r\n                    else\r\n                        document.removeEventListener(\"visibilitychange\", null);\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Object.defineProperty(Plugin.prototype, \"frameRate\", {\r\n                get: function () {\r\n                    return this._frameRate;\r\n                },\r\n                set: function (value) {\r\n                    value = value < 0 ? 0 : value;\r\n                    if (this._frameRate == value)\r\n                        return;\r\n                    this._frameRate = value;\r\n                    this.refreshTickInterval();\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Plugin.prototype.tick = function () {\r\n                var evt = document.createEvent(\"Event\");\r\n                evt.initEvent(\"tick\", true, true);\r\n                document.dispatchEvent(evt);\r\n            };\r\n            Object.defineProperty(Plugin.prototype, \"autoTick\", {\r\n                get: function () {\r\n                    return this._autoTick;\r\n                },\r\n                set: function (value) {\r\n                    if (this._autoTick == value)\r\n                        return;\r\n                    this._autoTick = value;\r\n                    this.refreshTickInterval();\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            Plugin.prototype.onVisibilityChange = function () {\r\n                this.active = document.visibilityState == \"visible\";\r\n            };\r\n            Plugin.prototype.refreshTickInterval = function () {\r\n                var _this = this;\r\n                clearInterval(this._tickInterval);\r\n                if (this._autoTick && this._frameRate > 0)\r\n                    this._tickInterval = setInterval(function () { return _this.tick(); }, 1000 / this._frameRate);\r\n            };\r\n            Plugin.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n            };\r\n            return Plugin;\r\n        })(jsidea.events.EventDispatcher);\r\n        plugins.Plugin = Plugin;\r\n    })(plugins = jsidea.plugins || (jsidea.plugins = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/plugins/Runner.ts",
      "size": 1111,
      "sizeMinified": 480,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var plugins;\r\n    (function (plugins) {\r\n        function Runner(element) {\r\n            var plugin = element.getAttribute(\"data-plugin\");\r\n            if (!plugin) {\r\n                return;\r\n            }\r\n            var qualifiedClassName = \"jsidea.plugins.\" + plugin;\r\n            var path = qualifiedClassName.split(\".\");\r\n            var hook = window[path[0]];\r\n            for (var i = 1; i < path.length; ++i) {\r\n                if (!hook) {\r\n                    console.warn(\"Plugin '\" + qualifiedClassName + \"' is undefined.\");\r\n                    return;\r\n                }\r\n                hook = hook[path[i]];\r\n            }\r\n            if (!hook) {\r\n                console.warn(\"Plugin '\" + qualifiedClassName + \"' is undefined.\");\r\n                return;\r\n            }\r\n            var app = new hook();\r\n        }\r\n        plugins.Runner = Runner;\r\n    })(plugins = jsidea.plugins || (jsidea.plugins = {}));\r\n})(jsidea || (jsidea = {}));\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    jsidea.plugins.Runner(document.body);\r\n});\r\n"
    },
    {
      "name": "src/jsidea/plugins/Simbox.ts",
      "size": 4140,
      "sizeMinified": 2365,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var plugins;\r\n    (function (plugins) {\r\n        var Simbox = (function (_super) {\r\n            __extends(Simbox, _super);\r\n            function Simbox() {\r\n                var _this = this;\r\n                _super.call(this);\r\n                this._host = \"ws://192.168.1.8:9989\";\r\n                this._data = null;\r\n                this._camera = new jsidea.geom.Matrix3D();\r\n                this._tip = new jsidea.geom.Point3D();\r\n                this._handle = new jsidea.geom.Point3D();\r\n                this._scale = new jsidea.geom.Point3D(2, 2, 2);\r\n                this._crosshair = document.getElementById(\"crosshair\");\r\n                this._tipElement = document.getElementById(\"tip\");\r\n                this._handleElement = document.getElementById(\"handle\");\r\n                this._cameraSelect = document.getElementById(\"camera-select\");\r\n                this._tipSelect = document.getElementById(\"tip-select\");\r\n                this._handleSelect = document.getElementById(\"handle-select\");\r\n                this._socket = new WebSocket(this._host);\r\n                this._socket.onopen = function () { return console.log(\"OPEN\"); };\r\n                this._socket.onerror = function (e) { return console.log(\"ERROR\", e); };\r\n                this._socket.onmessage = function (m) { return _this.setData(JSON.parse(m.data)); };\r\n                this._socket.onclose = function () { return console.log(\"CLOSE\"); };\r\n                document.documentElement.addEventListener(\"keyup\", function () { return _this.refresh(); });\r\n                document.documentElement.addEventListener(\"change\", function () { return _this.refresh(); });\r\n            }\r\n            Simbox.prototype.refresh = function () {\r\n                if (!this._data)\r\n                    return;\r\n                this.setData(this._data);\r\n            };\r\n            Simbox.prototype.setData = function (data) {\r\n                this._data = data;\r\n                var camSelect = this._cameraSelect;\r\n                var opt = camSelect.options[camSelect.selectedIndex];\r\n                var mat = data[opt.value];\r\n                this._camera.setData(mat);\r\n                var tipSelect = this._tipSelect;\r\n                var opt = tipSelect.options[tipSelect.selectedIndex];\r\n                var mat = data[opt.value];\r\n                this._tip.setData(mat);\r\n                this._camera.transform(this._tip, this._tip);\r\n                var handleSelect = this._handleSelect;\r\n                var opt = handleSelect.options[handleSelect.selectedIndex];\r\n                var mat = data[opt.value];\r\n                this._handle.setData(mat);\r\n                this._camera.transform(this._handle, this._handle);\r\n                this.layout();\r\n            };\r\n            Simbox.prototype.layout = function () {\r\n                var cenX = this._crosshair.offsetWidth * 0.5;\r\n                var cenY = this._crosshair.offsetHeight * 0.5;\r\n                var offX = this._tipElement.offsetWidth * -0.5 + cenX;\r\n                var offY = this._tipElement.offsetHeight * -0.5 + cenY;\r\n                offX -= this._tip.x * this._scale.x;\r\n                offY -= this._tip.y * this._scale.y;\r\n                this._tipElement.style.transform = \"translate(\" + offX + \"px, \" + offY + \"px)\";\r\n                offX = this._handleElement.offsetWidth * -0.5 + cenX;\r\n                offY = this._handleElement.offsetHeight * -0.5 + cenY;\r\n                offX -= this._handle.x * this._scale.x;\r\n                offY -= this._handle.y * this._scale.y;\r\n                this._handleElement.style.transform = \"translate(\" + offX + \"px, \" + offY + \"px)\";\r\n            };\r\n            return Simbox;\r\n        })(plugins.Plugin);\r\n        plugins.Simbox = Simbox;\r\n    })(plugins = jsidea.plugins || (jsidea.plugins = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/plugins/Test.ts",
      "size": 9103,
      "sizeMinified": 4337,
      "code": "var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar jsidea;\r\n(function (jsidea) {\r\n    var plugins;\r\n    (function (plugins) {\r\n        var Test = (function (_super) {\r\n            __extends(Test, _super);\r\n            function Test() {\r\n                _super.call(this);\r\n                var vie = document.createElement(\"div\");\r\n                vie.id = \"view\";\r\n                document.body.appendChild(vie);\r\n                var con = document.createElement(\"div\");\r\n                con.id = \"content\";\r\n                vie.appendChild(con);\r\n                this.testMatrixFit();\r\n            }\r\n            Test.prototype.testGeometryUtils = function () {\r\n                var con = document.getElementById(\"content\");\r\n                var vie = document.getElementById(\"view\");\r\n                var max = 17;\r\n                var te = 17;\r\n                document.body.className = \"test-\" + te;\r\n                var can = document.createElement(\"canvas\");\r\n                can.id = \"can\";\r\n                can.width = 1920;\r\n                can.height = 1080;\r\n                var ctx = can.getContext(\"2d\");\r\n                var teste = \"asdfasdf \" + can.id;\r\n                var a = document.createElement(\"div\");\r\n                a.id = \"a-cont\";\r\n                var tes = document.createElement(\"div\");\r\n                tes.id = \"tes-cont\";\r\n                tes.style.fontSize = \"100px\";\r\n                con.appendChild(tes);\r\n                var b = document.createElement(\"div\");\r\n                b.id = \"b-cont\";\r\n                var c = document.createElement(\"div\");\r\n                c.id = \"c-cont\";\r\n                var d = document.createElement(\"div\");\r\n                d.id = \"d-cont\";\r\n                var xc = document.createElement(\"div\");\r\n                xc.id = \"x-cont\";\r\n                a.appendChild(b);\r\n                b.appendChild(c);\r\n                c.appendChild(d);\r\n                d.appendChild(xc);\r\n                con.appendChild(a);\r\n                document.body.appendChild(can);\r\n                document.addEventListener(\"mousemove\", function (evt) {\r\n                    var pt = jsidea.layout.Transform.create(xc).globalToLocal(evt.pageX, evt.pageY, 0, null, jsidea.layout.BoxModel.BORDER);\r\n                    tes.textContent = Math.round(pt.x) + \" \" + Math.round(pt.y);\r\n                });\r\n                var mode = jsidea.layout.MoveMode.TRANSFORM;\r\n                var snap = new jsidea.layout.Snap();\r\n                snap.grid.element = document.documentElement;\r\n                snap.grid.boxModel = jsidea.layout.BoxModel.PADDING;\r\n                snap.to.x = 0;\r\n                snap.to.y = 0;\r\n                snap.to.boxModel = mode.boxModel;\r\n                var pos = new jsidea.layout.Position();\r\n                pos.snap = snap;\r\n                pos.move.mode = mode;\r\n                pos.to.boxModel = mode.boxModel;\r\n                var invertX = mode.invertX;\r\n                var invertY = mode.invertY;\r\n                var target = null;\r\n                var pivot = new jsidea.geom.Point3D();\r\n                var box = new jsidea.geom.Rect2D();\r\n                var transform = jsidea.layout.Transform.create();\r\n                var size = jsidea.layout.Box.create();\r\n                var cursor = new jsidea.geom.Point3D();\r\n                document.addEventListener(\"mousedown\", function (evt) {\r\n                    target = evt.target;\r\n                    evt.preventDefault();\r\n                    evt.stopImmediatePropagation();\r\n                    var mode = pos.move.mode || jsidea.layout.MoveMode.TRANSFORM;\r\n                    target.style.willChange = mode.willChange;\r\n                    cursor.setTo(evt.pageX, evt.pageY, 0);\r\n                    transform.update(target);\r\n                    var loc = transform.globalToLocalPoint(cursor, jsidea.layout.BoxModel.BORDER, pos.to.boxModel);\r\n                    box = transform.size.bounds(pos.to.boxModel, null, box);\r\n                    pivot.x = invertX ? (box.width - loc.x) : loc.x;\r\n                    pivot.y = invertY ? (box.height - loc.y) : loc.y;\r\n                });\r\n                document.addEventListener(\"mousemove\", function (evt) {\r\n                    if (!target)\r\n                        return;\r\n                    evt.preventDefault();\r\n                    evt.stopImmediatePropagation();\r\n                    cursor.setTo(evt.pageX, evt.pageY, 0);\r\n                    size.update(target, window.getComputedStyle(target));\r\n                    box = size.bounds(pos.to.boxModel, null, box);\r\n                    pos.to.x = invertX ? (box.width - pivot.x) : pivot.x;\r\n                    pos.to.y = invertY ? (box.height - pivot.y) : pivot.y;\r\n                    pos.from.x = cursor.x;\r\n                    pos.from.y = cursor.y;\r\n                    jsidea.layout.Position.apply(pos, target);\r\n                });\r\n                document.addEventListener(\"mouseup\", function (evt) {\r\n                    if (target)\r\n                        target.style.willChange = \"auto\";\r\n                    target = null;\r\n                    evt.preventDefault();\r\n                    evt.stopImmediatePropagation();\r\n                });\r\n                var draw = function () {\r\n                    var g = jsidea.display.Graphics.get(ctx);\r\n                    g.clear();\r\n                    g.bounds(vie);\r\n                    g.bounds(con);\r\n                    g.bounds(a);\r\n                    g.bounds(b);\r\n                    g.bounds(c);\r\n                    g.bounds(d);\r\n                    g.bounds(xc);\r\n                    g.bounds(can);\r\n                    g.stroke(\"#00FF00\", 4);\r\n                };\r\n                document.addEventListener(\"click\", draw);\r\n                var setTest = function (e) {\r\n                    if (e.keyCode == 37 || e.keyCode == 39) {\r\n                        if (e.keyCode == 37)\r\n                            te--;\r\n                        else\r\n                            te++;\r\n                        if (te > max)\r\n                            te = 0;\r\n                        else if (te < 0)\r\n                            te = max;\r\n                        document.body.className = \"test-\" + te;\r\n                        console.log(\"TEST-\" + te);\r\n                    }\r\n                };\r\n                document.addEventListener(\"keyup\", setTest);\r\n            };\r\n            Test.prototype.testMatrixFit = function () {\r\n                var q = new jsidea.geom.Quad(new jsidea.geom.Point3D(0, 0, 0), new jsidea.geom.Point3D(200, 50, 0), new jsidea.geom.Point3D(100, 300, 0), new jsidea.geom.Point3D(300, 300, 0));\r\n                var el = document.createElement(\"div\");\r\n                el.style.backgroundColor = \"#FFFF00\";\r\n                el.style.position = \"absolute\";\r\n                el.style.width = \"150px\";\r\n                el.style.height = \"120px\";\r\n                document.body.appendChild(el);\r\n                var origin = new jsidea.geom.Point2D(0, 0);\r\n                el.style.transformOrigin = origin.x + \"px \" + origin.y + \"px\";\r\n                var res = jsidea.geom.MatrixFit.fromQuad(origin, el.offsetWidth, el.offsetHeight, q);\r\n                el.style.transform = res.getCSS3D();\r\n            };\r\n            Test.prototype.testMutationObserver = function () {\r\n            };\r\n            Test.prototype.drawOffsetChain = function (ctx, e) {\r\n                while (e && e.parentElement != document.body.parentElement) {\r\n                    var sc = jsidea.layout.StyleNode.create(e);\r\n                    jsidea.display.Graphics.get(ctx).cross(sc.offset.x, sc.offset.y, 20).stroke();\r\n                    e = e.parentElement;\r\n                }\r\n            };\r\n            Test.prototype.logChain = function (f) {\r\n                var node = jsidea.layout.StyleNode.create(f);\r\n                if (node)\r\n                    node = node.first;\r\n                while (node) {\r\n                    var ofp = node.element.offsetParent;\r\n                    var calcedOff = node.offsetParent ? node.offsetParent.element : null;\r\n                    var scaleOff = node.parentScroll ? node.parentScroll.element : null;\r\n                    var res = ([\r\n                        jsidea.text.Text.conc(10, \" \", node.element.id ? node.element.id : node.element.nodeName),\r\n                        jsidea.text.Text.conc(12, \" \", \"FORCED_2D\", node.isForced2D),\r\n                    ]).join(\" \");\r\n                    console.log(res);\r\n                    node = node.child;\r\n                }\r\n            };\r\n            Test.prototype.testEventDispatcher = function () {\r\n                var d = new jsidea.events.EventDispatcher();\r\n            };\r\n            return Test;\r\n        })(plugins.Plugin);\r\n        plugins.Test = Test;\r\n    })(plugins = jsidea.plugins || (jsidea.plugins = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/system/Browser.ts",
      "size": 4319,
      "sizeMinified": 1748,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var system;\r\n    (function (system) {\r\n        var Browser = (function () {\r\n            function Browser() {\r\n            }\r\n            Browser.isOpera = /opr\\//i.test(navigator.userAgent) || /opera/i.test(navigator.userAgent);\r\n            Browser.isChrome = !Browser.isOpera && /chrome/i.test(navigator.userAgent);\r\n            Browser.isFirefox = /firefox/i.test(navigator.userAgent);\r\n            Browser.isSafari = !Browser.isChrome && !Browser.isFirefox && !Browser.isOpera && /safari/i.test(navigator.userAgent);\r\n            Browser.isInternetExplorer = (navigator.userAgent.indexOf(\"MSIE\") != -1) || !!navigator.userAgent.match(/Trident.*rv[ :]*11\\./);\r\n            Browser.isEdge = /edge\\//i.test(navigator.userAgent);\r\n            Browser.isYandex = /yandex/i.test(navigator.userAgent);\r\n            Browser.name = (function () {\r\n                if (Browser.isOpera)\r\n                    return \"Opera\";\r\n                if (Browser.isChrome)\r\n                    return \"Chrome\";\r\n                if (Browser.isFirefox)\r\n                    return \"Firefox\";\r\n                if (Browser.isSafari)\r\n                    return \"Safari\";\r\n                if (Browser.isInternetExplorer)\r\n                    return \"Internet Explorer\";\r\n                if (Browser.isYandex)\r\n                    return \"Yandex\";\r\n                return \"\";\r\n            })();\r\n            Browser.version = (function () {\r\n                var nVer = navigator.appVersion;\r\n                var nAgt = navigator.userAgent.toLowerCase();\r\n                var fullVersion = '' + parseFloat(navigator.appVersion);\r\n                var nameOffset, verOffset, ix;\r\n                if ((verOffset = nAgt.indexOf(\"opr/\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 4);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"opera\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 6);\r\n                    if ((verOffset = nAgt.indexOf(\"version\")) != -1)\r\n                        fullVersion = nAgt.substring(verOffset + 8);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"msie\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 5);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"edge/\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 5);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"; rv:\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 5);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"chrome\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 7);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"safari\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 7);\r\n                    if ((verOffset = nAgt.indexOf(\"version\")) != -1)\r\n                        fullVersion = nAgt.substring(verOffset + 8);\r\n                }\r\n                else if ((verOffset = nAgt.indexOf(\"firefox\")) != -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 8);\r\n                }\r\n                else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <\r\n                    (verOffset = nAgt.lastIndexOf('/'))) {\r\n                    fullVersion = nAgt.substring(verOffset + 1);\r\n                }\r\n                if ((ix = fullVersion.indexOf(\")\")) != -1)\r\n                    fullVersion = fullVersion.substring(0, ix);\r\n                if ((ix = fullVersion.indexOf(\";\")) != -1)\r\n                    fullVersion = fullVersion.substring(0, ix);\r\n                if ((ix = fullVersion.indexOf(\" \")) != -1)\r\n                    fullVersion = fullVersion.substring(0, ix);\r\n                if (isNaN(parseInt('' + fullVersion, 10)))\r\n                    fullVersion = '' + parseFloat(navigator.appVersion);\r\n                if (isNaN(parseInt('' + fullVersion, 10)))\r\n                    fullVersion = \"\";\r\n                return fullVersion;\r\n            })();\r\n            Browser.major = parseInt(Browser.version);\r\n            return Browser;\r\n        })();\r\n        system.Browser = Browser;\r\n    })(system = jsidea.system || (jsidea.system = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/system/Engine.ts",
      "size": 1329,
      "sizeMinified": 673,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var system;\r\n    (function (system) {\r\n        var Engine = (function () {\r\n            function Engine() {\r\n            }\r\n            Engine.isWebKit = !system.Browser.isInternetExplorer && !system.Browser.isEdge && /webkit/i.test(navigator.userAgent);\r\n            Engine.isBlink = Engine.isWebKit && ((system.Browser.isChrome && system.Browser.major >= 28) || (system.Browser.isOpera && system.Browser.major >= 15) || system.Browser.isYandex);\r\n            Engine.isTrident = /trident/i.test(navigator.userAgent);\r\n            Engine.isGecko = !system.Browser.isInternetExplorer && !Engine.isWebKit && /gecko/i.test(navigator.userAgent);\r\n            Engine.isEdgeHTML = system.Browser.isEdge && system.Browser.major >= 12;\r\n            Engine.name = (function () {\r\n                if (Engine.isBlink)\r\n                    return \"WebKit/Blink\";\r\n                if (Engine.isWebKit)\r\n                    return \"WebKit\";\r\n                if (Engine.isTrident)\r\n                    return \"Trident\";\r\n                if (Engine.isGecko)\r\n                    return \"Gecko\";\r\n                return \"\";\r\n            })();\r\n            return Engine;\r\n        })();\r\n        system.Engine = Engine;\r\n    })(system = jsidea.system || (jsidea.system = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/system/System.ts",
      "size": 1360,
      "sizeMinified": 533,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var system;\r\n    (function (system) {\r\n        var System = (function () {\r\n            function System() {\r\n            }\r\n            System.isWindows = /win/i.test(navigator.appVersion);\r\n            System.isMac = /mac/i.test(navigator.appVersion);\r\n            System.isUnix = /x11/i.test(navigator.appVersion);\r\n            System.isLinux = /linux/i.test(navigator.appVersion);\r\n            System.name = (function () {\r\n                if (System.isWindows)\r\n                    return \"Windows\";\r\n                if (System.isMac)\r\n                    return \"Mac OS X\";\r\n                if (System.isUnix)\r\n                    return \"Unix\";\r\n                if (System.isLinux)\r\n                    return \"Linux\";\r\n                return \"\";\r\n            })();\r\n            System.version = (function () {\r\n                if (System.isWindows)\r\n                    return \"7\";\r\n                if (System.isMac)\r\n                    return \"Yosemite\";\r\n                if (System.isUnix)\r\n                    return \"Unix\";\r\n                if (System.isLinux)\r\n                    return \"Linux\";\r\n                return \"\";\r\n            })();\r\n            return System;\r\n        })();\r\n        system.System = System;\r\n    })(system = jsidea.system || (jsidea.system = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    },
    {
      "name": "src/jsidea/text/Text.ts",
      "size": 2676,
      "sizeMinified": 1040,
      "code": "var jsidea;\r\n(function (jsidea) {\r\n    var text;\r\n    (function (text_1) {\r\n        var Text = (function () {\r\n            function Text() {\r\n            }\r\n            Text.fillHead = function (text, length, char) {\r\n                if (char === void 0) { char = \" \"; }\r\n                if (text.length >= length)\r\n                    return text;\r\n                while (text.length < length)\r\n                    text = char + text;\r\n                return text;\r\n            };\r\n            Text.fill = function (text, length, char) {\r\n                if (char === void 0) { char = \" \"; }\r\n                if (text.length >= length)\r\n                    return text;\r\n                while (text.length < length)\r\n                    text += char;\r\n                return text;\r\n            };\r\n            Text.conc = function (length, char) {\r\n                if (char === void 0) { char = \" \"; }\r\n                var args = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    args[_i - 2] = arguments[_i];\r\n                }\r\n                return this.fill(args.join(\" \"), length, char);\r\n            };\r\n            Text.color = function (hexColor) {\r\n                console.log(Math.round(hexColor).toString(16));\r\n                return \"#\" + this.fill(Math.round(hexColor).toString(16), 6, \"0\");\r\n            };\r\n            Text.byteLengthUTF8 = function (str) {\r\n                var s = str.length;\r\n                for (var i = str.length - 1; i >= 0; i--) {\r\n                    var code = str.charCodeAt(i);\r\n                    if (code > 0x7f && code <= 0x7ff)\r\n                        s++;\r\n                    else if (code > 0x7ff && code <= 0xffff)\r\n                        s += 2;\r\n                    if (code >= 0xDC00 && code <= 0xDFFF)\r\n                        i--;\r\n                }\r\n                return s;\r\n            };\r\n            Text.fileSize = function (bytes, roundMB) {\r\n                if (roundMB === void 0) { roundMB = false; }\r\n                var mb = jsidea.math.Number.precision(bytes * jsidea.math.Number.BYTE_TO_MB, 100);\r\n                if (mb > 1000)\r\n                    return jsidea.math.Number.precision(bytes * jsidea.math.Number.BYTE_TO_GIGABYTE, 100) + \" GB\";\r\n                else if (mb < 1)\r\n                    return Math.round(bytes * jsidea.math.Number.BYTE_TO_KILOBYTE) + \" kB\";\r\n                if (roundMB)\r\n                    return Math.round(mb) + \" MB\";\r\n                return mb + \" MB\";\r\n            };\r\n            return Text;\r\n        })();\r\n        text_1.Text = Text;\r\n    })(text = jsidea.text || (jsidea.text = {}));\r\n})(jsidea || (jsidea = {}));\r\n"
    }
  ]
}